// Copyright 2017 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package vm

import (
	"bytes"
	"encoding/json"
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/params"
)

// precompiledTest defines the input/output pairs for precompiled contract tests.
type precompiledTest struct {
	Input, Expected string
	Gas             uint64
	Name            string
	NoBenchmark     bool // Benchmark primarily the worst-cases
}

// precompiledFailureTest defines the input/error pairs for precompiled
// contract failure tests.
type precompiledFailureTest struct {
	Input         string
	ExpectedError string
	Name          string
}

// allPrecompiles does not map to the actual set of precompiles, as it also contains
// repriced versions of precompiles at certain slots
var allPrecompiles = map[common.Address]PrecompiledContract{
	common.BytesToAddress([]byte{1}):    &ecrecover{},
	common.BytesToAddress([]byte{2}):    &sha256hash{},
	common.BytesToAddress([]byte{3}):    &ripemd160hash{},
	common.BytesToAddress([]byte{4}):    &dataCopy{},
	common.BytesToAddress([]byte{5}):    &bigModExp{eip2565: false, eip7883: false},
	common.BytesToAddress([]byte{0xf5}): &bigModExp{eip2565: true, eip7883: false},
	common.BytesToAddress([]byte{0xf6}): &bigModExp{eip2565: true, eip7883: true},
	common.BytesToAddress([]byte{6}):    &bn256AddIstanbul{},
	common.BytesToAddress([]byte{7}):    &bn256ScalarMulIstanbul{},
	common.BytesToAddress([]byte{8}):    &bn256PairingGranite{},
	common.BytesToAddress([]byte{9}):    &blake2F{},
	common.BytesToAddress([]byte{0x0a}): &kzgPointEvaluation{},

	common.BytesToAddress([]byte{0x0f, 0x0a}): &bls12381G1Add{},
	common.BytesToAddress([]byte{0x0f, 0x0b}): &bls12381G1MultiExp{},
	common.BytesToAddress([]byte{0x1f, 0x0b}): &bls12381G1MultiExpIsthmus{},
	common.BytesToAddress([]byte{0x0f, 0x0c}): &bls12381G2Add{},
	common.BytesToAddress([]byte{0x0f, 0x0d}): &bls12381G2MultiExp{},
	common.BytesToAddress([]byte{0x1f, 0x0d}): &bls12381G2MultiExpIsthmus{},
	common.BytesToAddress([]byte{0x0f, 0x0e}): &bls12381Pairing{},
	common.BytesToAddress([]byte{0x1f, 0x0e}): &bls12381PairingIsthmus{},
	common.BytesToAddress([]byte{0x0f, 0x0f}): &bls12381MapG1{},
	common.BytesToAddress([]byte{0x0f, 0x10}): &bls12381MapG2{},

	common.BytesToAddress([]byte{0x0b}): &p256Verify{},
	common.BytesToAddress([]byte{0x12}): &NTT{},

	common.BytesToAddress([]byte{0x01, 0x00}): &p256VerifyFjord{},
}

// EIP-152 test vectors
var blake2FMalformedInputTests = []precompiledFailureTest{
	{
		Input:         "",
		ExpectedError: errBlake2FInvalidInputLength.Error(),
		Name:          "vector 0: empty input",
	},
	{
		Input:         "00000c48c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b61626300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000001",
		ExpectedError: errBlake2FInvalidInputLength.Error(),
		Name:          "vector 1: less than 213 bytes input",
	},
	{
		Input:         "000000000c48c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b61626300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000001",
		ExpectedError: errBlake2FInvalidInputLength.Error(),
		Name:          "vector 2: more than 213 bytes input",
	},
	{
		Input:         "0000000c48c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b61626300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000002",
		ExpectedError: errBlake2FInvalidFinalFlag.Error(),
		Name:          "vector 3: malformed final block indicator flag",
	},
}

func testPrecompiled(addr string, test precompiledTest, t *testing.T) {
	p := allPrecompiles[common.HexToAddress(addr)]
	in := common.Hex2Bytes(test.Input)
	gas := p.RequiredGas(in)
	t.Run(fmt.Sprintf("%s-Gas=%d", test.Name, gas), func(t *testing.T) {
		if res, _, err := RunPrecompiledContract(p, in, gas, nil); err != nil {
			t.Error(err)
		} else if common.Bytes2Hex(res) != test.Expected {
			t.Errorf("Expected %v, got %v", test.Expected, common.Bytes2Hex(res))
		}
		if expGas := test.Gas; expGas != gas {
			t.Errorf("%v: gas wrong, expected %d, got %d", test.Name, expGas, gas)
		}
		// Verify that the precompile did not touch the input buffer
		exp := common.Hex2Bytes(test.Input)
		if !bytes.Equal(in, exp) {
			t.Errorf("Precompiled %v modified input data", addr)
		}
	})
}

func testPrecompiledOOG(addr string, test precompiledTest, t *testing.T) {
	p := allPrecompiles[common.HexToAddress(addr)]
	in := common.Hex2Bytes(test.Input)
	gas := p.RequiredGas(in) - 1

	t.Run(fmt.Sprintf("%s-Gas=%d", test.Name, gas), func(t *testing.T) {
		_, _, err := RunPrecompiledContract(p, in, gas, nil)
		if err.Error() != "out of gas" {
			t.Errorf("Expected error [out of gas], got [%v]", err)
		}
		// Verify that the precompile did not touch the input buffer
		exp := common.Hex2Bytes(test.Input)
		if !bytes.Equal(in, exp) {
			t.Errorf("Precompiled %v modified input data", addr)
		}
	})
}

func testPrecompiledFailure(addr string, test precompiledFailureTest, t *testing.T) {
	p := allPrecompiles[common.HexToAddress(addr)]
	in := common.Hex2Bytes(test.Input)
	gas := p.RequiredGas(in)
	t.Run(test.Name, func(t *testing.T) {
		_, _, err := RunPrecompiledContract(p, in, gas, nil)
		if err.Error() != test.ExpectedError {
			t.Errorf("Expected error [%v], got [%v]", test.ExpectedError, err)
		}
		// Verify that the precompile did not touch the input buffer
		exp := common.Hex2Bytes(test.Input)
		if !bytes.Equal(in, exp) {
			t.Errorf("Precompiled %v modified input data", addr)
		}
	})
}

func benchmarkPrecompiled(addr string, test precompiledTest, bench *testing.B) {
	if test.NoBenchmark {
		return
	}
	p := allPrecompiles[common.HexToAddress(addr)]
	in := common.Hex2Bytes(test.Input)
	reqGas := p.RequiredGas(in)

	var (
		res  []byte
		err  error
		data = make([]byte, len(in))
	)

	bench.Run(fmt.Sprintf("%s-Gas=%d", test.Name, reqGas), func(bench *testing.B) {
		bench.ReportAllocs()
		start := time.Now()
		bench.ResetTimer()
		for i := 0; i < bench.N; i++ {
			copy(data, in)
			res, _, err = RunPrecompiledContract(p, data, reqGas, nil)
		}
		bench.StopTimer()
		elapsed := uint64(time.Since(start))
		if elapsed < 1 {
			elapsed = 1
		}
		gasUsed := reqGas * uint64(bench.N)
		bench.ReportMetric(float64(reqGas), "gas/op")
		// Keep it as uint64, multiply 100 to get two digit float later
		mgasps := (100 * 1000 * gasUsed) / elapsed
		bench.ReportMetric(float64(mgasps)/100, "mgas/s")
		//Check if it is correct
		if err != nil {
			bench.Error(err)
			return
		}
		if common.Bytes2Hex(res) != test.Expected {
			bench.Errorf("Expected %v, got %v", test.Expected, common.Bytes2Hex(res))
			return
		}
	})
}

// Benchmarks the sample inputs from the ECRECOVER precompile.
func BenchmarkPrecompiledEcrecover(bench *testing.B) {
	t := precompiledTest{
		Input:    "38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e000000000000000000000000000000000000000000000000000000000000001b38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e789d1dd423d25f0772d2748d60f7e4b81bb14d086eba8e8e8efb6dcff8a4ae02",
		Expected: "000000000000000000000000ceaccac640adf55b2028469bd36ba501f28b699d",
		Name:     "",
	}
	benchmarkPrecompiled("01", t, bench)
}

// Benchmarks the sample inputs from the SHA256 precompile.
func BenchmarkPrecompiledSha256(bench *testing.B) {
	t := precompiledTest{
		Input:    "38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e000000000000000000000000000000000000000000000000000000000000001b38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e789d1dd423d25f0772d2748d60f7e4b81bb14d086eba8e8e8efb6dcff8a4ae02",
		Expected: "811c7003375852fabd0d362e40e68607a12bdabae61a7d068fe5fdd1dbbf2a5d",
		Name:     "128",
	}
	benchmarkPrecompiled("02", t, bench)
}

// Benchmarks the sample inputs from the RIPEMD precompile.
func BenchmarkPrecompiledRipeMD(bench *testing.B) {
	t := precompiledTest{
		Input:    "38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e000000000000000000000000000000000000000000000000000000000000001b38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e789d1dd423d25f0772d2748d60f7e4b81bb14d086eba8e8e8efb6dcff8a4ae02",
		Expected: "0000000000000000000000009215b8d9882ff46f0dfde6684d78e831467f65e6",
		Name:     "128",
	}
	benchmarkPrecompiled("03", t, bench)
}

// Benchmarks the sample inputs from the identity precompile.
func BenchmarkPrecompiledIdentity(bench *testing.B) {
	t := precompiledTest{
		Input:    "38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e000000000000000000000000000000000000000000000000000000000000001b38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e789d1dd423d25f0772d2748d60f7e4b81bb14d086eba8e8e8efb6dcff8a4ae02",
		Expected: "38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e000000000000000000000000000000000000000000000000000000000000001b38d18acb67d25c8bb9942764b62f18e17054f66a817bd4295423adf9ed98873e789d1dd423d25f0772d2748d60f7e4b81bb14d086eba8e8e8efb6dcff8a4ae02",
		Name:     "128",
	}
	benchmarkPrecompiled("04", t, bench)
}

// Tests the sample inputs from the ModExp EIP 198.
func TestPrecompiledModExp(t *testing.T)      { testJson("modexp", "05", t) }
func BenchmarkPrecompiledModExp(b *testing.B) { benchJson("modexp", "05", b) }

func TestPrecompiledModExpEip2565(t *testing.T)      { testJson("modexp_eip2565", "f5", t) }
func BenchmarkPrecompiledModExpEip2565(b *testing.B) { benchJson("modexp_eip2565", "f5", b) }

func TestPrecompiledModExpEip7883(t *testing.T)      { testJson("modexp_eip7883", "f6", t) }
func BenchmarkPrecompiledModExpEip7883(b *testing.B) { benchJson("modexp_eip7883", "f6", b) }

// Tests the sample inputs from the elliptic curve addition EIP 213.
func TestPrecompiledBn256Add(t *testing.T)      { testJson("bn256Add", "06", t) }
func BenchmarkPrecompiledBn256Add(b *testing.B) { benchJson("bn256Add", "06", b) }

// Tests OOG
func TestPrecompiledModExpOOG(t *testing.T) {
	modexpTests, err := loadJson("modexp")
	if err != nil {
		t.Fatal(err)
	}
	for _, test := range modexpTests {
		testPrecompiledOOG("05", test, t)
	}
}

// Tests the sample inputs from the elliptic curve scalar multiplication EIP 213.
func TestPrecompiledBn256ScalarMul(t *testing.T)      { testJson("bn256ScalarMul", "07", t) }
func BenchmarkPrecompiledBn256ScalarMul(b *testing.B) { benchJson("bn256ScalarMul", "07", b) }

// Tests the sample inputs from the elliptic curve pairing check EIP 197.
func TestPrecompiledBn256Pairing(t *testing.T)      { testJson("bn256Pairing", "08", t) }
func BenchmarkPrecompiledBn256Pairing(b *testing.B) { benchJson("bn256Pairing", "08", b) }

func TestPrecompiledBlake2F(t *testing.T)      { testJson("blake2F", "09", t) }
func BenchmarkPrecompiledBlake2F(b *testing.B) { benchJson("blake2F", "09", b) }

func TestPrecompileBlake2FMalformedInput(t *testing.T) {
	for _, test := range blake2FMalformedInputTests {
		testPrecompiledFailure("09", test, t)
	}
}

func TestPrecompileBn256PairingTooLargeInput(t *testing.T) {
	big := make([]byte, params.Bn256PairingMaxInputSizeGranite+1)
	testPrecompiledFailure("08", precompiledFailureTest{
		Input:         common.Bytes2Hex(big),
		ExpectedError: "bad elliptic curve pairing input size",
		Name:          "bn256Pairing_input_too_big",
	}, t)
}

func TestPrecompileBlsInputSize(t *testing.T) {
	big := make([]byte, params.Bls12381G1MulMaxInputSizeIsthmus+1)
	testPrecompiledFailure("1f0b", precompiledFailureTest{
		Input:         common.Bytes2Hex(big),
		ExpectedError: "g1 msm input size exceeds maximum",
		Name:          "bls12381G1MSM_input_too_big",
	}, t)

	big = make([]byte, params.Bls12381G2MulMaxInputSizeIsthmus+1)
	testPrecompiledFailure("1f0d", precompiledFailureTest{
		Input:         common.Bytes2Hex(big),
		ExpectedError: "g2 msm input size exceeds maximum",
		Name:          "bls12381G2MSM_input_too_big",
	}, t)

	big = make([]byte, params.Bls12381PairingMaxInputSizeIsthmus+1)
	testPrecompiledFailure("1f0e", precompiledFailureTest{
		Input:         common.Bytes2Hex(big),
		ExpectedError: "pairing input size exceeds maximum",
		Name:          "bls12381Pairing_input_too_big",
	}, t)
}

func TestPrecompiledEcrecover(t *testing.T) { testJson("ecRecover", "01", t) }

func testJson(name, addr string, t *testing.T) {
	tests, err := loadJson(name)
	if err != nil {
		t.Fatal(err)
	}
	for _, test := range tests {
		testPrecompiled(addr, test, t)
	}
}

func testJsonFail(name, addr string, t *testing.T) {
	tests, err := loadJsonFail(name)
	if err != nil {
		t.Fatal(err)
	}
	for _, test := range tests {
		testPrecompiledFailure(addr, test, t)
	}
}

func benchJson(name, addr string, b *testing.B) {
	tests, err := loadJson(name)
	if err != nil {
		b.Fatal(err)
	}
	for _, test := range tests {
		benchmarkPrecompiled(addr, test, b)
	}
}

func TestPrecompiledBLS12381G1Add(t *testing.T)      { testJson("blsG1Add", "f0a", t) }
func TestPrecompiledBLS12381G1Mul(t *testing.T)      { testJson("blsG1Mul", "f0b", t) }
func TestPrecompiledBLS12381G1MultiExp(t *testing.T) { testJson("blsG1MultiExp", "f0b", t) }
func TestPrecompiledBLS12381G2Add(t *testing.T)      { testJson("blsG2Add", "f0c", t) }
func TestPrecompiledBLS12381G2Mul(t *testing.T)      { testJson("blsG2Mul", "f0d", t) }
func TestPrecompiledBLS12381G2MultiExp(t *testing.T) { testJson("blsG2MultiExp", "f0d", t) }
func TestPrecompiledBLS12381Pairing(t *testing.T)    { testJson("blsPairing", "f0e", t) }
func TestPrecompiledBLS12381MapG1(t *testing.T)      { testJson("blsMapG1", "f0f", t) }
func TestPrecompiledBLS12381MapG2(t *testing.T)      { testJson("blsMapG2", "f10", t) }

func TestPrecompiledPointEvaluation(t *testing.T) { testJson("pointEvaluation", "0a", t) }

func BenchmarkPrecompiledPointEvaluation(b *testing.B) { benchJson("pointEvaluation", "0a", b) }

func BenchmarkPrecompiledBLS12381G1Add(b *testing.B)      { benchJson("blsG1Add", "f0a", b) }
func BenchmarkPrecompiledBLS12381G1MultiExp(b *testing.B) { benchJson("blsG1MultiExp", "f0b", b) }
func BenchmarkPrecompiledBLS12381G2Add(b *testing.B)      { benchJson("blsG2Add", "f0c", b) }
func BenchmarkPrecompiledBLS12381G2MultiExp(b *testing.B) { benchJson("blsG2MultiExp", "f0d", b) }
func BenchmarkPrecompiledBLS12381Pairing(b *testing.B)    { benchJson("blsPairing", "f0e", b) }
func BenchmarkPrecompiledBLS12381MapG1(b *testing.B)      { benchJson("blsMapG1", "f0f", b) }
func BenchmarkPrecompiledBLS12381MapG2(b *testing.B)      { benchJson("blsMapG2", "f10", b) }

// Failure tests
func TestPrecompiledBLS12381G1AddFail(t *testing.T)      { testJsonFail("blsG1Add", "f0a", t) }
func TestPrecompiledBLS12381G1MulFail(t *testing.T)      { testJsonFail("blsG1Mul", "f0b", t) }
func TestPrecompiledBLS12381G1MultiExpFail(t *testing.T) { testJsonFail("blsG1MultiExp", "f0b", t) }
func TestPrecompiledBLS12381G2AddFail(t *testing.T)      { testJsonFail("blsG2Add", "f0c", t) }
func TestPrecompiledBLS12381G2MulFail(t *testing.T)      { testJsonFail("blsG2Mul", "f0d", t) }
func TestPrecompiledBLS12381G2MultiExpFail(t *testing.T) { testJsonFail("blsG2MultiExp", "f0d", t) }
func TestPrecompiledBLS12381PairingFail(t *testing.T)    { testJsonFail("blsPairing", "f0e", t) }
func TestPrecompiledBLS12381MapG1Fail(t *testing.T)      { testJsonFail("blsMapG1", "f0f", t) }
func TestPrecompiledBLS12381MapG2Fail(t *testing.T)      { testJsonFail("blsMapG2", "f10", t) }

func loadJson(name string) ([]precompiledTest, error) {
	data, err := os.ReadFile(fmt.Sprintf("testdata/precompiles/%v.json", name))
	if err != nil {
		return nil, err
	}
	var testcases []precompiledTest
	err = json.Unmarshal(data, &testcases)
	return testcases, err
}

func loadJsonFail(name string) ([]precompiledFailureTest, error) {
	data, err := os.ReadFile(fmt.Sprintf("testdata/precompiles/fail-%v.json", name))
	if err != nil {
		return nil, err
	}
	var testcases []precompiledFailureTest
	err = json.Unmarshal(data, &testcases)
	return testcases, err
}

// BenchmarkPrecompiledBLS12381G1MultiExpWorstCase benchmarks the worst case we could find that still fits a gaslimit of 10MGas.
func BenchmarkPrecompiledBLS12381G1MultiExpWorstCase(b *testing.B) {
	task := "0000000000000000000000000000000008d8c4a16fb9d8800cce987c0eadbb6b3b005c213d44ecb5adeed713bae79d606041406df26169c35df63cf972c94be1" +
		"0000000000000000000000000000000011bc8afe71676e6730702a46ef817060249cd06cd82e6981085012ff6d013aa4470ba3a2c71e13ef653e1e223d1ccfe9" +
		"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
	input := task
	for i := 0; i < 4787; i++ {
		input = input + task
	}
	testcase := precompiledTest{
		Input:       input,
		Expected:    "0000000000000000000000000000000005a6310ea6f2a598023ae48819afc292b4dfcb40aabad24a0c2cb6c19769465691859eeb2a764342a810c5038d700f18000000000000000000000000000000001268ac944437d15923dc0aec00daa9250252e43e4b35ec7a19d01f0d6cd27f6e139d80dae16ba1c79cc7f57055a93ff5",
		Name:        "WorstCaseG1",
		NoBenchmark: false,
	}
	benchmarkPrecompiled("f0b", testcase, b)
}

// BenchmarkPrecompiledBLS12381G2MultiExpWorstCase benchmarks the worst case we could find that still fits a gaslimit of 10MGas.
func BenchmarkPrecompiledBLS12381G2MultiExpWorstCase(b *testing.B) {
	task := "000000000000000000000000000000000d4f09acd5f362e0a516d4c13c5e2f504d9bd49fdfb6d8b7a7ab35a02c391c8112b03270d5d9eefe9b659dd27601d18f" +
		"000000000000000000000000000000000fd489cb75945f3b5ebb1c0e326d59602934c8f78fe9294a8877e7aeb95de5addde0cb7ab53674df8b2cfbb036b30b99" +
		"00000000000000000000000000000000055dbc4eca768714e098bbe9c71cf54b40f51c26e95808ee79225a87fb6fa1415178db47f02d856fea56a752d185f86b" +
		"000000000000000000000000000000001239b7640f416eb6e921fe47f7501d504fadc190d9cf4e89ae2b717276739a2f4ee9f637c35e23c480df029fd8d247c7" +
		"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
	input := task
	for i := 0; i < 1040; i++ {
		input = input + task
	}

	testcase := precompiledTest{
		Input:       input,
		Expected:    "0000000000000000000000000000000018f5ea0c8b086095cfe23f6bb1d90d45de929292006dba8cdedd6d3203af3c6bbfd592e93ecb2b2c81004961fdcbb46c00000000000000000000000000000000076873199175664f1b6493a43c02234f49dc66f077d3007823e0343ad92e30bd7dc209013435ca9f197aca44d88e9dac000000000000000000000000000000000e6f07f4b23b511eac1e2682a0fc224c15d80e122a3e222d00a41fab15eba645a700b9ae84f331ae4ed873678e2e6c9b000000000000000000000000000000000bcb4849e460612aaed79617255fd30c03f51cf03d2ed4163ca810c13e1954b1e8663157b957a601829bb272a4e6c7b8",
		Name:        "WorstCaseG2",
		NoBenchmark: false,
	}
	benchmarkPrecompiled("f0d", testcase, b)
}

// Benchmarks the sample inputs from the P256VERIFY precompile.
func BenchmarkPrecompiledP256VerifyFjord(bench *testing.B) {
	t := precompiledTest{
		Input:    "4cee90eb86eaa050036147a12d49004b6b9c72bd725d39d4785011fe190f0b4da73bd4903f0ce3b639bbbf6e8e80d16931ff4bcf5993d58468e8fb19086e8cac36dbcd03009df8c59286b162af3bd7fcc0450c9aa81be5d10d312af6c66b1d604aebd3099c618202fcfe16ae7770b0c49ab5eadf74b754204a3bb6060e44eff37618b065f9832de4ca6ca971a7a1adc826d0f7c00181a5fb2ddf79ae00b4e10e",
		Expected: "0000000000000000000000000000000000000000000000000000000000000001",
		Name:     "p256VerifyFjord",
	}
	benchmarkPrecompiled("100", t, bench)
}

func TestPrecompiledP256VerifyFjord(t *testing.T) { testJson("p256VerifyFjord", "100", t) }

// Benchmarks the sample inputs from the P256VERIFY precompile.
func BenchmarkPrecompiledP256Verify(bench *testing.B) {
	t := precompiledTest{
		Input:    "4cee90eb86eaa050036147a12d49004b6b9c72bd725d39d4785011fe190f0b4da73bd4903f0ce3b639bbbf6e8e80d16931ff4bcf5993d58468e8fb19086e8cac36dbcd03009df8c59286b162af3bd7fcc0450c9aa81be5d10d312af6c66b1d604aebd3099c618202fcfe16ae7770b0c49ab5eadf74b754204a3bb6060e44eff37618b065f9832de4ca6ca971a7a1adc826d0f7c00181a5fb2ddf79ae00b4e10e",
		Expected: "0000000000000000000000000000000000000000000000000000000000000001",
		Name:     "p256Verify",
	}
	benchmarkPrecompiled("0b", t, bench)
}

func TestPrecompiledP256Verify(t *testing.T) { testJson("p256Verify", "0b", t) }

// Test NTT precompile with malformed inputs
func TestPrecompileNTTMalformedInput(t *testing.T) {
	// NTT malformed input test vectors
	var nttMalformedInputTests = []precompiledFailureTest{
		{
			Input:         "",
			ExpectedError: "input too short",
			Name:          "empty input",
		},
		{
			Input:         "00",
			ExpectedError: "input too short",
			Name:          "too short input",
		},
		{
			Input:         "02000000100000000000000011",
			ExpectedError: "invalid operation: must be 0 (forward) or 1 (inverse)",
			Name:          "invalid operation",
		},
		{
			Input:         "00000000080000000000000011",
			ExpectedError: "invalid ring degree: must be power of 2 >= 16",
			Name:          "invalid ring degree (too small)",
		},
		{
			Input:         "0000000011000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			ExpectedError: "invalid ring degree: must be power of 2 >= 16",
			Name:          "invalid ring degree (not power of 2)",
		},
		{
			Input:         "00000000100000000000000000",
			ExpectedError: "modulus cannot be zero",
			Name:          "zero modulus",
		},
		{
			Input:         "000000001000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			ExpectedError: "modulus must be congruent to 1 mod 2*ringDegree",
			Name:          "non NTT-friendly modulus",
		},
		{
			Input:         "00000000100000000000000021000000000000000100000000000000020000000000000003000000000000000400000000000000050000000000000006000000000000000700000000000000080000000000000009000000000000000a000000000000000b000000000000000c000000000000000d000000000000000e000000000000000f0000000000000022",
			ExpectedError: "coefficient 15 exceeds modulus",
			Name:          "coefficient exceeds modulus",
		},
	}
	for _, test := range nttMalformedInputTests {
		testPrecompiledFailure("12", test, t)
	}
}

// Test NTT precompile with valid inputs
func TestPrecompiledNTT(t *testing.T) {
	// Test forward NTT with ring degree 16
	forwardTest := precompiledTest{
		Input:    "00000000100000000000000061000000000000000100000000000000020000000000000003000000000000000400000000000000050000000000000006000000000000000700000000000000080000000000000009000000000000000a000000000000000b000000000000000c000000000000000d000000000000000e000000000000000f0000000000000010",
		Expected: "00000000000000450000000000000028000000000000001d000000000000004c000000000000004c0000000000000001000000000000001600000000000000120000000000000045000000000000004a000000000000002b000000000000003800000000000000200000000000000004000000000000001e0000000000000038",
		Name:     "forward NTT ring degree 16",
		Gas:      70000,
	}
	testPrecompiled("12", forwardTest, t)

	// Test inverse NTT with ring degree 16
	inverseTest := precompiledTest{
		Input:    "0100000010000000000000006100000000000000450000000000000028000000000000001d000000000000004c000000000000004c0000000000000001000000000000001600000000000000120000000000000045000000000000004a000000000000002b000000000000003800000000000000200000000000000004000000000000001e0000000000000038",
		Expected: "000000000000000100000000000000020000000000000003000000000000000400000000000000050000000000000006000000000000000700000000000000080000000000000009000000000000000a000000000000000b000000000000000c000000000000000d000000000000000e000000000000000f0000000000000010",
		Name:     "inverse NTT ring degree 16",
		Gas:      70000,
	}
	testPrecompiled("12", inverseTest, t)
}

// Benchmarks the NTT precompile
func BenchmarkPrecompiledNTT(bench *testing.B) {
	// Basic ring degree 16 benchmark
	nttTest := precompiledTest{
		Input:    "00000000100000000000000061000000000000000100000000000000020000000000000003000000000000000400000000000000050000000000000006000000000000000700000000000000080000000000000009000000000000000a000000000000000b000000000000000c000000000000000d000000000000000e000000000000000f0000000000000010",
		Expected: "00000000000000450000000000000028000000000000001d000000000000004c000000000000004c0000000000000001000000000000001600000000000000120000000000000045000000000000004a000000000000002b000000000000003800000000000000200000000000000004000000000000001e0000000000000038",
		Name:     "NTT-ring16",
		Gas:      70000,
	}
	benchmarkPrecompiled("12", nttTest, bench)
}

// Benchmark NTT precompile with crypto standards
func BenchmarkPrecompiledNTTCryptoStandards(bench *testing.B) {
	// Pre-computed test cases with actual NTT results
	testCases := []precompiledTest{
		{
			Name: "NTT-Falcon-512",
			Gas:  70000,
			Input: func() string {
				operation := "00"
				ringDegree := fmt.Sprintf("%08x", 512)
				modulus := fmt.Sprintf("%016x", 12289)
				coeffs := ""
				for i := 1; i <= 512; i++ {
					coeffs += fmt.Sprintf("%016x", uint64(i)%12289)
				}
				return operation + ringDegree + modulus + coeffs
			}(),
			Expected: "00000000000018ce000000000000025300000000000025f3000000000000039000000000000028020000000000002391000000000000209f000000000000077a00000000000015b1000000000000048d0000000000002d190000000000000b210000000000001dd70000000000000fe600000000000001de000000000000031700000000000018f9000000000000095f0000000000000b050000000000002fb6000000000000154b00000000000029e0000000000000149d0000000000002a990000000000001c070000000000000896000000000000007a00000000000028e900000000000028570000000000000bbf00000000000027cf000000000000143e00000000000018a500000000000005460000000000002a94000000000000213a0000000000002e030000000000000b390000000000001922000000000000162c000000000000019100000000000003ff0000000000000b6a0000000000002d6100000000000027f00000000000002f7d00000000000003ab0000000000001df40000000000000565000000000000144500000000000018f700000000000029b400000000000008b1000000000000043e0000000000000e3e0000000000001be60000000000000bab000000000000034d000000000000245800000000000017b80000000000001dbf0000000000002aae00000000000001440000000000002fbd00000000000007c4000000000000151c00000000000014f500000000000018d00000000000000947000000000000071e000000000000039d000000000000060c0000000000001700000000000000182800000000000022ff0000000000000384000000000000257d00000000000013070000000000000c760000000000000d3700000000000009c90000000000000bdc00000000000019500000000000000d400000000000001e8800000000000000fe000000000000257100000000000022dd0000000000001c0c000000000000023d000000000000065e0000000000002c940000000000001bd400000000000023340000000000002cdf00000000000013c300000000000011410000000000002d83000000000000083e000000000000149c0000000000002a7700000000000029d100000000000020c40000000000002aa800000000000010510000000000001f0900000000000016a70000000000002d1800000000000026d1000000000000239e00000000000024660000000000001efe0000000000001d4e000000000000190500000000000019f7000000000000021100000000000011fd000000000000093700000000000028b100000000000021c30000000000002a97000000000000293200000000000006950000000000000de30000000000000e0d000000000000044b0000000000001c160000000000000bdd0000000000002e4c00000000000012400000000000000236000000000000103800000000000002700000000000000cb60000000000002459000000000000014000000000000017860000000000000b7c0000000000000a16000000000000193000000000000025ec00000000000001e90000000000000a6b0000000000000a38000000000000220700000000000016230000000000002f160000000000002335000000000000062c00000000000019950000000000000bf4000000000000230c00000000000024ec0000000000002e720000000000000b9800000000000002a40000000000002cf100000000000021a9000000000000189d00000000000024b60000000000000da600000000000016660000000000000c2900000000000019a000000000000011ab0000000000000e6300000000000001010000000000002b8a000000000000072700000000000021e40000000000002849000000000000177a00000000000008b70000000000002c79000000000000024700000000000015bc0000000000000ff10000000000000a4c000000000000130f000000000000086a0000000000000375000000000000026a000000000000022a0000000000001c2b0000000000000db70000000000000e6c000000000000096a0000000000001bd8000000000000299100000000000019bc0000000000000a4a0000000000000dd30000000000000d330000000000001c400000000000000aae0000000000001aba0000000000001edd0000000000001cd200000000000008910000000000001a100000000000000a7500000000000028970000000000002a4400000000000012840000000000001ba900000000000003cc00000000000028230000000000000b010000000000002dfd00000000000003da000000000000267c00000000000027f60000000000001cc20000000000001208000000000000227500000000000026880000000000000c480000000000002b8b000000000000089b000000000000095400000000000012be0000000000001b470000000000000cae0000000000000c520000000000001d3c0000000000001e080000000000002a4b000000000000088600000000000016a000000000000015f900000000000006790000000000002b5d0000000000000f090000000000000ee200000000000026c30000000000000eb50000000000000d2d000000000000149f0000000000000ac3000000000000117a0000000000002e2200000000000019cc000000000000015d00000000000010130000000000000c5e00000000000027510000000000001c740000000000000aee00000000000024a900000000000028740000000000002e6a000000000000280e00000000000012f500000000000026fd0000000000002c7f0000000000002f770000000000001a2c0000000000001de40000000000002b060000000000001f10000000000000113500000000000002b70000000000002e4e00000000000023e0000000000000099d0000000000001fcd00000000000020cb0000000000002f8200000000000015310000000000000be600000000000018f600000000000003a000000000000021dd0000000000001877000000000000009800000000000010d50000000000001b260000000000002cd4000000000000104700000000000019dc000000000000071600000000000029d6000000000000280800000000000024fb00000000000027dc000000000000255f00000000000027960000000000000aef0000000000000e0f0000000000000cf30000000000002b660000000000000aa70000000000000007000000000000138b0000000000000cd0000000000000263300000000000010430000000000002aa10000000000000f7800000000000017f7000000000000205500000000000013fd0000000000000e310000000000002029000000000000232c0000000000000640000000000000235a00000000000002790000000000000a1500000000000020290000000000001dff000000000000123800000000000004810000000000000edc0000000000000bd1000000000000173a00000000000015b4000000000000098100000000000009c30000000000001b36000000000000025600000000000023e400000000000025e0000000000000019e00000000000012ca0000000000000dfb00000000000029810000000000002c3f000000000000104b000000000000110c000000000000222a0000000000002de500000000000014c40000000000001fe5000000000000203f0000000000000bc900000000000025e100000000000007bb0000000000001344000000000000022e0000000000002b6d00000000000026340000000000002ffd00000000000014fe00000000000001010000000000001e680000000000001fdb00000000000002500000000000001c0100000000000029ae0000000000000c5100000000000029be00000000000005380000000000000a780000000000000d0a00000000000011e000000000000029a200000000000020f400000000000024a700000000000015050000000000001f7a00000000000022c60000000000001103000000000000025500000000000003e1000000000000000e00000000000029ad000000000000211500000000000014b80000000000000abb00000000000009890000000000002980000000000000123a0000000000000d5500000000000006ca000000000000063600000000000010fe0000000000002b770000000000002ce50000000000000f630000000000002138000000000000244a0000000000002662000000000000244a0000000000000e050000000000002e4e0000000000002dd1000000000000297f000000000000012900000000000009af000000000000067300000000000006260000000000000c5400000000000004010000000000000faf0000000000002810000000000000296c0000000000001336000000000000092000000000000000530000000000000f5500000000000002690000000000000d750000000000001ee00000000000001aab000000000000056b0000000000001c910000000000001c5b00000000000004070000000000000dea0000000000001b8600000000000019a70000000000002f04000000000000282e000000000000232000000000000014550000000000001d75000000000000297f000000000000119b0000000000002f9f0000000000002e0f00000000000010d1000000000000073800000000000022eb000000000000169c00000000000022d90000000000000a0400000000000004b600000000000023670000000000002d08000000000000226b0000000000002f760000000000000fdf000000000000135800000000000011690000000000002d330000000000000e940000000000000a1200000000000012f800000000000028e000000000000015700000000000000b230000000000001874000000000000279a00000000000002160000000000002a7f00000000000008d8000000000000274c00000000000007e60000000000001742000000000000131a0000000000001aa600000000000011560000000000000cae000000000000136900000000000011bd000000000000101d000000000000191a000000000000231d0000000000001a3b00000000000029eb0000000000002c9a00000000000010040000000000000f1200000000000025e10000000000002d6a00000000000019cf0000000000000a770000000000001efd0000000000001d2b000000000000266b000000000000249d00000000000004d3000000000000083600000000000007600000000000000feb0000000000002290000000000000264c0000000000000a530000000000001f4f000000000000124c000000000000077800000000000004840000000000001f400000000000001ea70000000000002f8a0000000000001618000000000000205a000000000000105e0000000000000dd70000000000002e6300000000000011a80000000000000acb0000000000000a19000000000000245200000000000001c000000000000007ca0000000000002b6300000000000015a90000000000000ea00000000000002d720000000000002f7d0000000000000b620000000000001b710000000000001997000000000000249a00000000000029060000000000001d7100000000000023a800000000000019f200000000000002fb0000000000001dce",
		},
		{
			Name: "NTT-Kyber-128",
			Gas:  70000,
			Input: func() string {
				operation := "00"
				ringDegree := fmt.Sprintf("%08x", 128)
				modulus := fmt.Sprintf("%016x", 3329)
				coeffs := ""
				for i := 1; i <= 128; i++ {
					coeffs += fmt.Sprintf("%016x", uint64(i)%3329)
				}
				return operation + ringDegree + modulus + coeffs
			}(),
			Expected: "00000000000001100000000000000ae4000000000000099300000000000003da0000000000000a0e00000000000002f3000000000000062300000000000002e20000000000000c87000000000000085800000000000007790000000000000667000000000000065700000000000004e800000000000007c3000000000000044800000000000001c9000000000000001b0000000000000cd500000000000007d60000000000000bdd0000000000000948000000000000082300000000000002a400000000000002ec00000000000003e00000000000000079000000000000031300000000000008900000000000000a3300000000000003e200000000000004bc00000000000007ec0000000000000bae00000000000004990000000000000652000000000000045e00000000000006c50000000000000c1b00000000000005ca00000000000008c70000000000000cdf0000000000000be800000000000008280000000000000a3c0000000000000b9a000000000000033c00000000000005aa0000000000000668000000000000058d000000000000046d0000000000000921000000000000005200000000000003fd00000000000009f000000000000009c800000000000002b80000000000000750000000000000024600000000000000e600000000000007ff000000000000050a00000000000008130000000000000ab3000000000000034800000000000001070000000000000cd50000000000000ad5000000000000000f000000000000054b000000000000065f0000000000000b14000000000000067500000000000002150000000000000be500000000000004f400000000000007770000000000000c6400000000000003900000000000000a360000000000000bc40000000000000a85000000000000020b0000000000000cef000000000000071000000000000001740000000000000a310000000000000373000000000000013e0000000000000c680000000000000b5f0000000000000cf20000000000000b9c000000000000053900000000000001f4000000000000052e00000000000004b20000000000000a490000000000000b690000000000000c8d00000000000005020000000000000be7000000000000081e000000000000033f000000000000024f0000000000000820000000000000074500000000000003c80000000000000182000000000000089e00000000000008350000000000000399000000000000005d00000000000002b10000000000000ca0000000000000097400000000000003040000000000000a8800000000000007140000000000000475000000000000016700000000000006d2000000000000032800000000000009d40000000000000c1500000000000009cc000000000000016b0000000000000b17",
		},
		{
			Name: "NTT-Dilithium-256",
			Gas:  70000,
			Input: func() string {
				operation := "00"
				ringDegree := fmt.Sprintf("%08x", 256)
				modulus := fmt.Sprintf("%016x", 8380417)
				coeffs := ""
				for i := 1; i <= 256; i++ {
					coeffs += fmt.Sprintf("%016x", uint64(i)%8380417)
				}
				return operation + ringDegree + modulus + coeffs
			}(),
			Expected: "00000000004768f700000000006fd627000000000031579a0000000000401b0f000000000024b42400000000003eaa8e00000000002549f4000000000005811d0000000000307ec700000000002d6ba30000000000141b4400000000006c48b50000000000086cc100000000001336a700000000003f7f25000000000023edb100000000000307a10000000000298239000000000013becb0000000000229cca000000000062c96f0000000000255b2a000000000007feec0000000000187a800000000000148b6e000000000038fb8d00000000007881c300000000005188a6000000000073dc96000000000046207c00000000000c2ae6000000000060c3040000000000175427000000000064337700000000005db8cf0000000000200253000000000028312f000000000002e11500000000000d940c00000000000b740600000000005bdd17000000000058d4000000000000722e3c00000000006a8bf500000000002377200000000000413b6c00000000003aa12a00000000006a08a500000000006fb00c00000000006c62b20000000000026eb200000000003faf68000000000074b6750000000000775d810000000000698e31000000000074aed300000000002be95e000000000039d44600000000006ca4120000000000388aa800000000000a926000000000006691eb00000000007e964d00000000001b0fd3000000000050387c00000000005ee9c2000000000011b97600000000001e9e47000000000039a7dc00000000005415b2000000000056ce8c0000000000194f81000000000010953500000000003d760b00000000005de3f300000000001907c1000000000005c979000000000018f6720000000000763772000000000039e72d00000000003866f800000000005065b800000000004c03a700000000000867d5000000000023244700000000002d1289000000000068780800000000007ba48900000000004edaa00000000000514091000000000040c5f600000000004cd7a8000000000067f6a500000000002a48e900000000007383cd000000000066feb60000000000302e47000000000074f85d0000000000483ba500000000004334ea000000000014c6bb00000000006f7ca600000000002cb6f400000000000d83e600000000003b446000000000001d4eb8000000000023ba61000000000034eb38000000000058296300000000006c1331000000000041022c00000000002445980000000000122b96000000000071796600000000004eba3d00000000006964270000000000589a89000000000056707800000000006db015000000000059c60200000000007306120000000000096dca00000000001ae6bf000000000029e9dc00000000006269b800000000000a06a900000000002e890d00000000001d9f150000000000096b7a00000000000d2bcc000000000027f0d600000000002395f90000000000151f9e00000000001a01a100000000006dd6e300000000004b78c4000000000002622a000000000047d9c6000000000008b21700000000006501ec000000000054d160000000000017ce1e000000000053bd0d00000000006fb9c2000000000009f16600000000006d181600000000006490880000000000332365000000000077cee000000000004cf7f100000000005525fd000000000059054300000000005077ac00000000005ba878000000000019b65b000000000036a5130000000000676022000000000064c65f00000000007fccbf0000000000013932000000000042e576000000000053c84c00000000002e71ac00000000003bdafa000000000079e6c900000000006bb1b6000000000011b60d000000000003951e000000000041ae7c000000000024820a00000000007eb5a80000000000677b5000000000000775de00000000003c76090000000000311ff2000000000028952600000000005cfeef00000000000ee455000000000052606900000000006be427000000000042edfe000000000019c3ae00000000005a72a1000000000043b45f00000000006d20920000000000384bde000000000036989b000000000069759a00000000004364eb000000000018486e00000000001ce2bf00000000001dc2d500000000001427ec0000000000298065000000000004b6da000000000016ff05000000000004658f000000000069a0b00000000000196fe1000000000074617b00000000004fa6310000000000427a42000000000060ffe500000000003886f20000000000620a1d00000000005ca46600000000007023fe000000000015d6b3000000000015584100000000001b189f0000000000561e1800000000005009e700000000007b885e00000000002204bb00000000000b35bf0000000000463b19000000000022ada00000000000736c6d0000000000741d66000000000063820100000000001f52c7000000000038b54800000000007ef440000000000051b0f000000000002bc546000000000059367400000000005015fd000000000067895f0000000000620801000000000012ae2b000000000021f1d3000000000074823b0000000000287797000000000067d58400000000007a9c1f00000000004e8de700000000005371200000000000648ce000000000007e11a500000000007cbcee00000000007a127b000000000044f6b4000000000033661e000000000067464e000000000034e443000000000077d81300000000007f90a400000000002b72f100000000000bb9ee00000000002dc3aa000000000041adb600000000007c15970000000000582204000000000042d9c400000000002d90fe00000000005c796b",
		},
	}

	for _, test := range testCases {
		benchmarkPrecompiled("12", test, bench)
	}
}
