/************************************************************************************************************************************************************************/                                                                                                                                                                          
/*ZZZZZZZZZZZZZZZZZZZKKKKKKKKK    KKKKKKKNNNNNNNN        NNNNNNNN     OOOOOOOOO     XXXXXXX       XXXXXXX                         ..../&@&#.       .###%@@@#, ..                         
/*Z:::::::::::::::::ZK:::::::K    K:::::KN:::::::N       N::::::N   OO:::::::::OO   X:::::X       X:::::X                      ...(@@* .... .           &#//%@@&,.                       
/*Z:::::::::::::::::ZK:::::::K    K:::::KN::::::::N      N::::::N OO:::::::::::::OO X:::::X       X:::::X                    ..*@@.........              .@#%%(%&@&..                    
/*Z:::ZZZZZZZZ:::::Z K:::::::K   K::::::KN:::::::::N     N::::::NO:::::::OOO:::::::OX::::::X     X::::::X                   .*@( ........ .  .&@@@@.      .@%%%%%#&@@.                  
/*ZZZZZ     Z:::::Z  KK::::::K  K:::::KKKN::::::::::N    N::::::NO::::::O   O::::::OXXX:::::X   X::::::XX                ...&@ ......... .  &.     .@      /@%%%%%%&@@#                  
/*        Z:::::Z      K:::::K K:::::K   N:::::::::::N   N::::::NO:::::O     O:::::O   X:::::X X:::::X                   ..@( .......... .  &.     ,&      /@%%%%&&&&@@@.              
/*       Z:::::Z       K::::::K:::::K    N:::::::N::::N  N::::::NO:::::O     O:::::O    X:::::X:::::X                   ..&% ...........     .@%(#@#      ,@%%%%&&&&&@@@%.               
/*      Z:::::Z        K:::::::::::K     N::::::N N::::N N::::::NO:::::O     O:::::O     X:::::::::X                   ..,@ ............                 *@%%%&%&&&&&&@@@.               
/*     Z:::::Z         K:::::::::::K     N::::::N  N::::N:::::::NO:::::O     O:::::O     X:::::::::X                  ..(@ .............             ,#@&&&&&&&&&&&&@@@@*               
/*    Z:::::Z          K::::::K:::::K    N::::::N   N:::::::::::NO:::::O     O:::::O    X:::::X:::::X                   .*@..............  . ..,(%&@@&&&&&&&&&&&&&&&&@@@@,               
/*   Z:::::Z           K:::::K K:::::K   N::::::N    N::::::::::NO:::::O     O:::::O   X:::::X X:::::X                 ...&#............. *@@&&&&&&&&&&&&&&&&&&&&@@&@@@@&                
/*ZZZ:::::Z     ZZZZZKK::::::K  K:::::KKKN::::::N     N:::::::::NO::::::O   O::::::OXXX:::::X   X::::::XX               ...@/.......... *@@@@. ,@@.  &@&&&&&&@@@@@@@@@@@.               
/*Z::::::ZZZZZZZZ:::ZK:::::::K   K::::::KN::::::N      N::::::::NO:::::::OOO:::::::OX::::::X     X::::::X               ....&#..........@@@, *@@&&&@% .@@@@@@@@@@@@@@@&                  
/*Z:::::::::::::::::ZK:::::::K    K:::::KN::::::N       N:::::::N OO:::::::::::::OO X:::::X       X:::::X                ....*@.,......,@@@...@@@@@@&..%@@@@@@@@@@@@@/                   
/*Z:::::::::::::::::ZK:::::::K    K:::::KN::::::N        N::::::N   OO:::::::::OO   X:::::X       X:::::X                   ...*@,,.....%@@@,.........%@@@@@@@@@@@@(                     
/*ZZZZZZZZZZZZZZZZZZZKKKKKKKKK    KKKKKKKNNNNNNNN         NNNNNNN     OOOOOOOOO     XXXXXXX       XXXXXXX                      ...&@,....*@@@@@ ..,@@@@@@@@@@@@@&.                     
/*                                                                                                                                   ....,(&@@&..,,,/@&#*. .                             
/*                                                                                                                                    ......(&.,.,,/&@,.                                
/*                                                                                                                                      .....,%*.,*@%                               
/*                                                                                                                                    .#@@@&(&@*,,*@@%,..                               
/*                                                                                                                                    .##,,,**$.,,*@@@@@%.                               
/*                                                                                                                                     *(%%&&@(,,**@@@@@&                              
/*                                                                                                                                      . .  .#@((@@(*,**                                
/*                                                                                                                                             . (*. .                                   
/*                                                                                                                                              .*/   
///* Copyright (C) 2025 - Renaud Dubois, Simon Masson - This file is part of ZKNOX project
///* License: This software is licensed under MIT License
///* This Code may be reused including this header, license and copyright notice.
///* See LICENSE file at the root folder of the project.
///* FILE: ZKNOX_NTT.sol
///* Description: Test file for ZKNOX_NTT implementation
/************************************************************************************************************************************************************************/   
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";

import  "../src/ZKNOX_NTT.sol";


//only for bench
contract NTTTest is Test {
    // File generated using ../pythonref/scripts/generate_test_vectors_solidity.py

    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt=new ZKNOX_NTT(address(0),address(0), 8380417, 8347681);
  // forgefmt: disable-next-line
        uint256[256]  psi_rev = [1, 3572223, 4618904, 4614810, 3201430, 3145678, 2883726, 3201494, 7159240, 557458, 7375178, 3764867, 2129892, 2682288, 3542485, 7778734, 5564778, 2283733, 642628, 4795319, 5926434, 1460718, 3227876, 1714295, 676590, 1335936, 4855975, 434125, 2663378, 1674615, 5010068, 4063053, 6526611, 5463079, 5034454, 1858416, 5188063, 2897314, 7823561, 3870317, 6444618, 3756790, 6663429, 3950053, 1759347, 3415069, 7562881, 3574466, 6308588, 4361428, 2156050, 3241972, 7986269, 928749, 4874037, 1095468, 5269599, 6279007, 7220542, 4675594, 3602218, 5197539, 3586446, 5639874, 6026202, 1011223, 8052569, 348812, 6458164, 4561790, 6143691, 6635910, 2778788, 5697147, 2775755, 7023969, 6067579, 3467665, 653275, 7921254, 3035980, 7759253, 7062739, 5919030, 3901472, 1226661, 5006167, 5454601, 2391089, 6125690, 2579253, 1787943, 4898211, 4197502, 6018354, 7080401, 4892034, 4213992, 1987814, 3197248, 5130263, 5121960, 1736313, 8145010, 7897768, 6852351, 7231559, 5418153, 5917973, 5046034, 565603, 169688, 2508980, 6352299, 3815725, 6442847, 4222329, 1109516, 2983781, 5569126, 5307408, 1277625, 3852015, 5744944, 8106357, 5258977, 5157610, 4183372, 2926054, 392707, 5365997, 1716814, 2358373, 2193087, 6195333, 5256655, 3974485, 4606686, 303005, 3531229, 6480365, 7598542, 7648983, 1054478, 770441, 7835041, 8165537, 5016875, 5360024, 1370517, 11879, 4385746, 7826699, 508145, 7277073, 3105558, 3430436, 860144, 140244, 1514152, 5767564, 4231948, 4022750, 7630840, 5346675, 338420, 5370669, 5732423, 4399818, 2569011, 1723229, 6764887, 5011144, 1163598, 2028038, 1665318, 1179613, 7794176, 7852436, 5637006, 6275131, 1623354, 2374402, 6346610, 1994046, 6903432, 2491325, 1393159, 7655613, 1834526, 507927, 1187885, 89301, 2513018, 5382198, 141835, 1354892, 613238, 6161950, 7070156, 2039144, 1879878, 2178965, 818761, 7921677, 1921994, 3472069, 4340221, 6653329, 2192938, 6607829, 4234153, 4768667, 2387513, 8111961, 3180456, 5737437, 5184741, 7126227, 8368000, 6084318, 4633167, 7140506, 4541938, 27812, 822541, 5926272, 1009365, 4620952, 4423473, 1596822, 6400920, 2455377, 250446, 7744461, 3551006, 3768948, 5702139, 3410568, 1685153, 6444997, 1753, 5720892, 1455890, 8321269, 5607817, 2660408, 1780227, 3284915, 4663471, 3956745, 6084020, 7743490, 4415111, 7198174, 87208];
               // forgefmt: disable-next-line
        uint256[256]  psi_inv_rev = [1, 4808194, 3765607, 3761513, 5178923, 5496691, 5234739, 5178987, 601683, 4837932, 5698129, 6250525, 4615550, 1005239, 7822959, 1221177, 4317364, 3370349, 6705802, 5717039, 7946292, 3524442, 7044481, 7703827, 6666122, 5152541, 6919699, 2453983, 3585098, 7737789, 6096684, 2815639, 2740543, 4793971, 3182878, 4778199, 3704823, 1159875, 2101410, 3110818, 7284949, 3506380, 7451668, 394148, 5138445, 6224367, 4018989, 2071829, 4805951, 817536, 4965348, 6621070, 4430364, 1716988, 4623627, 1935799, 4510100, 556856, 5483103, 3192354, 6522001, 3345963, 2917338, 1853806, 4197045, 3222807, 3121440, 274060, 2635473, 4528402, 7102792, 3073009, 2811291, 5396636, 7270901, 4158088, 1937570, 4564692, 2028118, 5871437, 8210729, 7814814, 3334383, 2462444, 2962264, 1148858, 1528066, 482649, 235407, 6644104, 3258457, 3250154, 5183169, 6392603, 4166425, 3488383, 1300016, 2362063, 4182915, 3482206, 6592474, 5801164, 2254727, 5989328, 2925816, 3374250, 7153756, 4478945, 2461387, 1317678, 621164, 5344437, 459163, 7727142, 4912752, 2312838, 1356448, 5604662, 2683270, 5601629, 1744507, 2236726, 3818627, 1922253, 8031605, 327848, 7369194, 2354215, 8293209, 1182243, 3965306, 636927, 2296397, 4423672, 3716946, 5095502, 6600190, 5720009, 2772600, 59148, 6924527, 2659525, 8378664, 1935420, 6695264, 4969849, 2678278, 4611469, 4829411, 635956, 8129971, 5925040, 1979497, 6783595, 3956944, 3759465, 7371052, 2454145, 7557876, 8352605, 3838479, 1239911, 3747250, 2296099, 12417, 1254190, 3195676, 2642980, 5199961, 268456, 5992904, 3611750, 4146264, 1772588, 6187479, 1727088, 4040196, 4908348, 6458423, 458740, 7561656, 6201452, 6500539, 6341273, 1310261, 2218467, 7767179, 7025525, 8238582, 2998219, 5867399, 8291116, 7192532, 7872490, 6545891, 724804, 6987258, 5889092, 1476985, 6386371, 2033807, 6006015, 6757063, 2105286, 2743411, 527981, 586241, 7200804, 6715099, 6352379, 7216819, 3369273, 1615530, 6657188, 5811406, 3980599, 2647994, 3009748, 8041997, 3033742, 749577, 4357667, 4148469, 2612853, 6866265, 8240173, 7520273, 4949981, 5274859, 1103344, 7872272, 553718, 3994671, 8368538, 7009900, 3020393, 3363542, 214880, 545376, 7609976, 7325939, 731434, 781875, 1900052, 4849188, 8077412, 3773731, 4405932, 3123762, 2185084, 6187330, 6022044, 6663603, 3014420, 7987710, 5454363];

    uint256 constant q = 8380417;//dilithium field
    uint256 nm1modq=8347681;//256^-1 mod q



    //exemple of stateful initialisation, no external contract provided
    function setUp() public {
       
        console.log("q=%d, n=%d",q,psi_rev.length);

        bytes memory bytecode_psirev=abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca));//here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create
        
        bytes memory bytecode_psiInvrev=abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5));//here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        ntt.update(a_psirev, a_psiInvrev, q, nm1modq );//update ntt with outer contract

      

    } 

    function testbench_NTTFW() public view{
        uint256[] memory fi;
        uint256[] memory gi;

        fi = new uint256[](256);
        gi = new uint256[](256);


        for(uint i=0;i<256;i++){
            fi[i]=addmod(mulmod(i,i,q),2837649,q);
            gi[i]=mulmod(fi[i],i,q);
        }

         uint256[] memory h=ntt.ZKNOX_NTTFW(fi, ntt.o_psirev());
         h[0]=0;//warning removal
    }    

     function testbench_NTTINV() public view{
        uint256[] memory fi;
        uint256[] memory gi;

        fi = new uint256[](256);
        gi = new uint256[](256);


        for(uint i=0;i<256;i++){
            fi[i]=addmod(mulmod(i,i,q),2837649,q);
            gi[i]=mulmod(fi[i],i,q);
        }

         uint256[] memory h=ntt.ZKNOX_NTTINV(fi, ntt.o_psi_inv_rev());
         h[0]=0;//warning removal
    }    

    function testbench_NTTHALF() public view{
        uint256[] memory fi;
        uint256[] memory gi;

        fi = new uint256[](256);
        gi = new uint256[](256);


        for(uint i=0;i<256;i++){
            fi[i]=addmod(mulmod(i,i,q),2837649,q);
            gi[i]=mulmod(fi[i],i,q);
        }

         uint256[] memory h=ntt.ZKNOX_NTT_HALFMUL(fi, gi);
         h[0]=0;//warning removal
    }

    // ntt of f and g, using ../pythonref/scripts/generate_test_vectors_solidity.py
        uint256[]  f = [uint256(2594005), 1647810, 1099775, 4604185, 4157351, 8246596, 4077834, 7354657, 8119566, 7738404, 3971999, 2839545, 5560219, 2720862, 2380151, 4598107, 8171940, 7322513, 2443709, 6752702, 3032476, 3223087, 6586529, 1077416, 1073068, 5015625, 4086924, 2925996, 2658647, 3421147, 8059613, 2690808, 3126421, 6629237, 7303518, 7918096, 2648913, 4475258, 7683700, 6111696, 3838765, 3111788, 1633333, 7732439, 6976696, 5567000, 3290798, 92117, 3730376, 3138070, 7181687, 2062545, 4619582, 3772801, 4277742, 4651910, 3425933, 4657036, 5281024, 7914851, 713279, 4222291, 1863379, 2648809, 4507230, 4843979, 52249, 7630807, 1287604, 2754780, 2810532, 1433687, 1963364, 1082286, 347468, 6358732, 4185037, 2653672, 6553835, 8029351, 8293919, 3614138, 461997, 1983474, 1763784, 3256679, 8242462, 7779270, 4801287, 3495251, 5306531, 7022018, 2266908, 5918245, 4030146, 7501061, 6632530, 3579359, 5741989, 2792560, 536297, 3041410, 1000577, 7856114, 1907531, 6041556, 3527316, 1785946, 182400, 2176153, 6193335, 7253330, 416047, 5550146, 2781516, 1205285, 2696182, 7278012, 663208, 8369009, 341933, 4903616, 169634, 6336308, 7004269, 1946328, 4909267, 7864130, 6640059, 7828235, 6239088, 6004744, 5402387, 161939, 391737, 7119354, 1256015, 3292037, 6114704, 1343903, 1837240, 1013344, 1059498, 3736616, 2484431, 6589046, 8355747, 1192513, 6432998, 2907800, 3678649, 8219525, 5604205, 1506846, 2311917, 5559751, 2785438, 1701650, 1330267, 329992, 4481124, 3084547, 4217998, 6409776, 2588452, 3857760, 1651961, 4603461, 2121277, 2486334, 492146, 7240468, 5151773, 5934706, 1205166, 2746274, 3764965, 6889085, 5088264, 133829, 4924716, 2474638, 2288301, 3794065, 3607138, 5685464, 6426224, 6601109, 894915, 7748378, 157184, 290667, 6111547, 2657664, 1601150, 4708646, 2451314, 2441993, 3965088, 2374356, 4115145, 3176310, 426165, 4736728, 6533249, 6432853, 7328541, 3820742, 5277375, 6217381, 4923469, 8339363, 7421231, 5282836, 5256621, 3243551, 2103046, 2186987, 389847, 2729309, 4757279, 6662099, 3062175, 6151635, 7800680, 1439448, 7773374, 1403332, 4342474, 282847, 8305632, 6883394, 6635827, 5546988, 5337986, 1119280, 6494911, 6217350, 4625889, 7604228, 5244377, 4670230, 3561917, 1887927, 847736, 3996771, 2177047, 3664787, 1002646, 7717925, 506886, 4241155, 7014527, 4376187, 48796, 3322846];
        uint256[]  f_ntt = [uint256(6364912), 3995622, 4476295, 8303410, 1332456, 6421716, 8203899, 2530034, 8313489, 7338304, 3414935, 6038329, 2029654, 7599163, 905646, 7656554, 4025646, 5550004, 7671903, 7874193, 5810712, 6064006, 4197090, 658801, 7781667, 7937223, 2690861, 4065713, 7593061, 6851339, 89805, 7006595, 3017411, 5498003, 6924815, 6258943, 4778633, 2826660, 8144980, 4427259, 3516732, 5777631, 4548238, 1030974, 864754, 1125018, 7824369, 4557830, 6141772, 42808, 4571970, 3689869, 8148694, 5773256, 5887217, 4204821, 3956737, 8121384, 7990579, 6379162, 5622787, 1131874, 1096089, 6791745, 5614290, 4298344, 3144152, 2168186, 8196994, 646126, 2171075, 62956, 5125137, 7380322, 5123918, 2469706, 4055143, 5239265, 474310, 1540779, 6201775, 2612094, 5200218, 6195551, 2643528, 1330772, 4177951, 6070033, 5200755, 381810, 2523365, 4280464, 2269951, 7584984, 3370118, 5290380, 2342575, 7566632, 6319630, 3463598, 1981213, 3789610, 6475597, 1898067, 1799621, 5449172, 5362220, 1422719, 3491354, 3132744, 3114858, 4568032, 8352914, 4895768, 6761414, 5291293, 7559381, 7475952, 7782259, 4121389, 6396925, 7288640, 2889281, 479326, 4565699, 6610888, 7257810, 6250748, 5049559, 6110247, 4013840, 3732139, 7695538, 4120256, 5030464, 8036003, 7817859, 4704960, 2513471, 6461410, 8117869, 4335007, 297725, 1472739, 2008408, 7140883, 1863554, 7804423, 7107998, 5792528, 2651316, 7502546, 529708, 2242809, 4200906, 1021021, 7491915, 654652, 2852818, 5206790, 2369673, 643921, 77857, 5341609, 6691868, 5491875, 5938415, 5262564, 5826244, 3479208, 8378019, 1383248, 1819090, 1215225, 3254977, 6764459, 2928441, 715359, 1578124, 3310815, 3008934, 2558605, 1538047, 3644477, 4288039, 3169082, 587660, 2189823, 6443874, 7594254, 2532938, 1739551, 7029243, 5707052, 6814969, 3831478, 7323430, 165012, 7536319, 5065672, 6196100, 5811052, 328126, 6174105, 5714689, 2356206, 2488949, 2813627, 4252039, 6436999, 3910340, 1234061, 6804932, 6811831, 3313484, 6472032, 7859121, 8332300, 1286652, 2137321, 6167524, 1961565, 673144, 2299950, 2901435, 1060965, 2448911, 771880, 2528464, 6880195, 1959766, 8076654, 3537501, 5728409, 6143525, 6502693, 3930344, 1997206, 3864734, 3421418, 2716501, 7481114, 568184, 7139343, 4435778, 2355634, 4317241, 7058653, 3738990, 5349252, 7557007, 5262315, 5420527, 1150986, 5770898, 6347734];
   
    function test_NTTFW() public view{
         uint256[] memory fntt=ntt.ZKNOX_NTTFW(f, ntt.o_psirev());
         for(uint i=0;i<256;i++){
            assertEq(fntt[i], f_ntt[i]);
         }
    }

 function test_NTTINV() public view{
         uint256[] memory res=ntt.ZKNOX_NTTINV(f_ntt, ntt.o_psi_inv_rev());
         for(uint i=0;i<256;i++){
            assertEq(res[i], f[i]);
         }
    }

}    
