from falcon import HEAD_LEN, SALT_LEN, decompress, SecretKey, PublicKey
from common import falcon_compact, q
from polyntt.poly import Poly
from keccak_prng import KeccakPRNG
from generate_falcon_test_vectors import list_of_messages
from Crypto.Hash import keccak
from eth_abi import encode
from shake import SHAKE

n = 512
# An example of secret key
f = [0, -7, -2, -1, 0, 0, 1, -2, 0, -2, -3, 0, 1, 8, 3, 2, -3, -3, 2, -6, 0, -7, 0, -6, 0, 5, 0, 2, 7, 3, 3, -1, -4, -2, -4, -1, -1, 3, 1, 1, -1, -1, 6, -1, -3, 4, 4, -7, 6, -2, 6, 4, 1, 5, 5, -2, -6, -1, -1, 6, 2, 4, -2, -3, 0, 5, 8, 1, 6, -1, -5, -1, 3, 2, -2, -2, -1, 0, -2, 8, 4, 9, 1, 1, -4, 1, 0, 3, -1, 0, -4, 0, 0, -2, 0, -5, 3, 4, 1, 2, 6, 3, 0, -3, 3, -5, -2, 2, 4, 0, -2, 0, -3, 4, 1, -3, -1, -5, 1, -5, 0, -4, -4, 5, -6, 10, -1, -8, -2, 8, -7, 2, 0, 3, 2, -1, -3, -5, -2, -3, 6, -5, 1, 1, 2, -6, 2, -1, -6, -2, -8, -1, -1, -5, 0, -6, -6, 1, -7, 9, 0, 1, 9, 5, 2, 3, 2, 1, 2, 3, -1, -2, 2, 6, -3, 6, -1, 3, 0, 3, 1, 3, 2, -5, -4, -1, 0, -2, 1, 8, -5, 1, 1, -4, -2, 9, -4, 3, -2, -6, -1, -3, 2, 9, -3, 0, -6, -1, -1, -6, 4, -2, -1, -2, 3, 2, -2, 5, 8, -6, 3, -5, -1, -1, -2, -2, -3, 1, 5, -1, 4, -2, -3, 6, -2, 3, -9, 10, -3, -3, -7, -5, 3, -7, -5, 1, 0, -2, -3, -6, -10,
     2, -1, 1, 3, 3, 2, 4, -3, 4, -2, -1, 1, 2, 5, 3, 3, -2, 0, 6, 1, -3, 4, 2, -2, -2, 3, 3, -1, -5, 3, 1, -1, -5, 0, 0, -2, -3, -1, 4, -2, 6, -8, -1, -1, 1, -3, -2, -2, -1, -8, 2, 5, 1, -2, 0, -10, 1, 0, -1, 9, -2, 0, -3, 5, 2, 1, 3, -2, -3, -1, -2, -4, 3, 3, 1, 4, 3, 7, -6, -2, -1, -5, -2, 0, -4, 1, 4, -3, 3, -5, -4, 0, 4, 1, 2, -3, -2, 5, -2, 7, 2, -2, 5, 4, -6, -2, -1, 0, 3, -2, 3, 7, 0, 2, 3, -3, -2, 3, 2, 2, 1, 5, 0, 4, 1, 4, 7, -3, 3, 7, -1, 0, 1, 7, -6, -4, -3, 1, -4, 1, 2, 2, 5, 0, -1, 0, -4, 0, 9, -4, 4, -5, -3, 8, 1, 3, 3, 0, -6, 0, -3, 0, -1, 4, 2, 2, 16, -5, -1, 0, 3, -2, 0, 3, -6, -1, 8, -1, 2, 0, 0, -1, 5, 3, 2, 4, 2, -3, 1, -6, 5, 0, 3, 6, 8, 4, 0, 2, -2, 11, 4, 1, -4, 2, 3, -1, 2, -6, -1, -1, 3, 2, 1, -6, -1, -5, 4, -1, -10, -3, -3, 6, 0, 6, 1, 3, 5, 2, 5, 4, 5, -3, 3, 2, -2, -1, -6, 4, 5, 1, -5, 8, -3, 4, 1, 1, 3, -9, 8, 0, 2, -2, 4, 9, 4, 1, 0, -2, 2, -1, 1]
g = [6, -1, 4, 0, 0, -2, -2, -4, 1, 4, -4, -3, 6, 2, -2, 0, 2, 0, 7, 3, -7, -3, 4, -1, -3, 7, 2, -1, 6, -5, 5, 1, -2, 6, -6, 4, -3, 8, 0, -1, -11, 7, 5, -3, 0, 1, 5, 6, -4, 0, -3, -1, -4, 0, 1, 3, 5, -1, 7, -3, -3, -3, 1, 3, 0, 2, 0, -2, -6, 4, -4, -1, 0, 6, -4, 0, 2, 2, -10, 5, -3, 4, 0, 4, -6, 5, -2, -3, 1, -6, 2, 1, -5, -2, -8, 7, -1, 1, 1, 2, 3, 0, 3, 0, -1, 2, -4, 0, 2, 3, 1, 0, 2, 0, -4, 3, -4, 5, -4, 1, 3, -4, -2, 1, 4, 2, -3, 5, -1, 5, -4, 2, 2, 3, 0, -1, -1, 4, -1, -4, -1, 2, 5, 3, -3, 9, -2, -8, 3, 1, 6, 2, 5, 2, -3, 8, 3, -2, -6, 1, 2, -2, -7, -3, -2, 6, 2, -2, 1, -2, -4, -3, 0, -2, 4, -2, 8, -11, -2, 4, 6, -1, 0, 2, -6, 11, 3, -2, -1, -2, 1, -5, 6, 7, -3, -3, 0, 1, 2, -5, -1, 1, 2, 2, 2, -2, -10, 1, 1, -8, 2, 0, -8, 0, -7, 1, 2, -1, -3, -2, 0, -7, -3, 1, 0, 1, -6, 2, 4, 1, 0, 2, -8, 0, -9, 1, 2, 4, 2, 1, -4, -9, 5, -1, 6, -4, -2, -9, 5, -1, 1, -1, 5, 1, -1, 1,
     3, -2, -3, -1, -3, 4, -5, 6, 0, -12, -4, -5, -2, 1, -7, -4, -2, -3, -3, 2, -1, -5, -1, 8, 3, 0, -1, -4, 1, 0, -7, 6, -9, 2, -2, 1, 6, -4, -3, -2, -5, 3, -5, 0, 3, -12, 4, 2, 4, -2, -3, 0, -1, 2, 7, 1, 2, 11, -6, 3, 2, -4, -3, 5, -3, 0, -2, 4, 7, 3, 3, 1, 7, 2, 1, 5, 8, -1, 2, 0, 6, -6, -6, -8, 1, 2, -5, 7, -5, 1, -5, 2, -1, 1, -3, 4, -7, -3, -2, -8, 7, 11, 0, -3, -3, -2, 2, 2, 4, 1, 0, -2, 5, 0, -2, 4, 5, 3, -1, -4, -4, -3, 0, 0, 2, -4, 3, 3, -1, -3, 1, 0, 2, 14, 7, 0, -4, 3, -1, -2, -1, -2, 2, -5, 4, 3, 6, -4, 2, -4, -2, -1, 2, 3, -4, -3, -1, 6, 1, -4, 4, 5, 1, -1, 3, -6, 5, 9, 8, -5, 2, 4, 1, 9, 5, -4, -1, 1, 0, 3, -4, 1, 0, -4, -6, 8, 1, 2, 5, 8, -2, 5, -6, -6, 1, -5, 0, -3, -3, 3, 1, 1, -2, -7, 8, 1, 1, 2, -1, 5, 6, -3, -1, 6, -3, -7, 5, -1, -3, 2, 0, -4, 4, 4, 8, 0, -8, 4, 0, 3, 2, -3, 0, 2, -5, 1, 1, 6, -3, -6, 3, -1, -2, 4, -3, 0, -4, 4, 3, -3, -3, 13, -5, -3, -3, -2]
F = [-23, 22, -11, -5, -18, 61, -2, 3, 1, -4, 12, -5, 3, -35, -49, 4, 14, -18, -16, 30, -11, -16, 4, -33, -7, -22, 15, 3, -7, -8, -9, -62, 44, 41, 15, -7, -10, 17, 37, 46, 30, -38, 36, 8, -14, 25, -29, 39, -27, 21, 26, -8, 18, -7, 31, -8, -33, 5, -4, 14, 18, -49, -15, -51, 16, -53, -10, -3, -12, 10, -29, 20, -13, 27, -12, 28, -9, 12, -25, -23, -45, -16, 11, -7, -6, 6, 27, -22, 48, 44, 60, 13, 10, 37, -1, 28, 1, -3, 2, 7, 24, 22, -14, 11, -1, 33, 2, 22, -26, -21, 15, -1, 12, 15, 14, -20, -3, -40, -1, 6, -7, 3, 15, 16, 31, -12, -23, 34, -11, -3, 29, -51, 42, -32, 29, -52, -22, -11, -11, 19, -12, 37, 45, -4, -3, 11, -18, 72, -6, 41, 44, -16, 24, -47, -35, -4, 13, 7, 35, -33, 12, 2, 1, -5, -10, -52, -27, -6, -4, 26, -21, -22, -2, 11, -1, -36, -11, 2, 41, -25, 19, 3, -47, 11, 12, 8, 26, -10, 10, 29, -10, 33, -46, 16, -11, 2, 2, -19, 26, -22, -12, -41, 22, -10, 22, -1, -1, 6, -22, -6, -9, 36, -7, -8, -1, 27, -26, -22, -36, 6, 20, 26, -44, 3, 24, 0, 18, -15, 17, -11, 1, -64, 4, 9, 7, 21, -15, -9, -11, -36, 48, 56, 8, 19, -35, 41, -13, -42, -9, -6, 53, -37, 24, -33, 12, 0, 20,
     26, 48, -19, -22, 4, 34, 44, 16, -13, -4, 14, -22, 29, -37, 43, -12, 16, 40, -21, 64, 5, 33, 0, 10, -11, -15, -13, 28, 22, -47, -11, -22, -1, -77, 27, 11, -8, 59, -31, -3, -29, -48, -42, 13, 27, 10, -55, 14, -2, -37, 17, 4, 23, -20, 34, 3, -10, 24, 23, -39, -26, -5, 6, -31, -6, 5, -5, 16, 13, -23, -27, 5, -31, -6, 8, -38, 30, -11, -13, 17, 8, 3, 7, -7, -15, -29, -32, 15, -36, 40, -6, 17, -12, 6, -15, 23, -14, 13, 31, -6, 85, -6, 9, -26, 21, 7, 11, 31, -49, -6, -9, -12, 6, 3, 16, 23, 9, -2, -6, -32, 5, -11, 54, 44, -9, -28, -24, -18, 44, 39, 20, -2, -35, 11, 5, 42, 10, -24, -24, -30, -27, -36, -2, -23, 39, -9, -6, -12, 16, 36, 5, 51, 17, -9, -25, -8, -17, 7, -4, -51, -44, 34, -2, -38, -14, -26, -12, 16, -12, 27, 15, -33, 30, -9, 8, -40, 4, -33, 27, -40, -22, 13, 11, 4, 6, -1, -50, -2, -7, 5, -23, 1, -11, -17, 6, 0, 2, -13, -8, -23, -24, 6, -4, 14, 12, 24, 4, -17, -10, -8, -40, -42, 32, -21, -19, -27, -1, -23, 16, -24, 34, -43, 7, 24, -34, -13, -6, 10, -16, 12, 7, -10, -24, 18, -31, 28, 35, 34, 4, 7, 18, -46, 47, -26, -18, -36, -38, -6, -13, -19, -7, -13, 13, -1, -54]
G = [-10, 12, -13, -20, 7, 32, -17, 31, -61, -3, 23, -65, 28, -61, -22, 56, 33, 11, 12, 7, 34, -33, 21, 27, -22, 67, -14, -5, -18, -4, -1, -42, 3, 51, -19, -1, 16, 14, 55, -37, 29, 28, 32, 20, -31, -46, 39, 7, -1, -22, -61, 23, -22, 9, -13, 11, 20, 16, -30, 1, 52, 46, 10, -6, 12, -31, 31, -15, 9, -19, -7, -5, 5, 16, -19, 63, -35, -21, -22, 0, 46, 7, -16, -12, 5, 3, -8, -43, 21, 21, 47, -30, -29, 16, 9, 14, -21, -9, 8, -26, -9, 20, -42, 59, -14, 6, 20, -31, -37, 14, 39, 0, 2, -40, 43, -3, -32, -27, -21, -15, 2, 0, -23, -5, -3, -9, 12, -27, -36, 4, -22, 23, -1, -12, 32, -39, -4, -33, -20, -7, -12, -22, 35, -21, 4, 2, 8, 26, -24, 12, -2, -39, -3, 8, 59, 12, -16, -8, -5, 36, 11, 16, 45, 19, -50, -32, -7, 27, 3, -17, 52, -27, -64, -12, -9, 6, -13, -29, -10, 2, 44, -16, -12, -9, -19, -6, -6, 6, 24, -55, 42, 38, -15, 38, -16, -22, -4, -9, 38, 21, 12, 50, -11, 9, 31, -33, 46, -12, 40, 2, -15, 6, -41, 27, 44, -1, -10, -9, -17, 24, 4, -5, 2, -22, 32, -51, -2, -23, 18, 27, -15, -17, 34, -15, 13, 1, -5, 36, 3, 36, -7, -8, 33, -19, -14, 4, -7, -8, 15, 0, -32, -7, -31,
     67, -27, -35, -6, 26, 13, -12, 24, 35, -21, 24, -16, 16, 10, 47, -14, 3, -5, 2, 3, -26, 0, -29, 4, 21, -17, -16, -20, 7, -44, -34, 26, 2, 6, -8, -17, 17, -14, 7, -5, 6, -33, 13, 6, 35, 21, -42, 3, 5, 8, 23, 27, -10, -40, 4, -20, 9, -31, -40, 14, 9, 45, -12, -32, 4, 7, 15, 25, 7, 9, 23, 4, 33, -35, 47, 2, 30, -22, 8, -38, -28, 62, -16, 13, -4, 5, 16, 34, -8, 44, 26, -45, 27, -42, 26, 33, -22, -25, 0, -3, -29, 6, 18, 11, 4, 9, -20, -9, 1, 14, -8, -6, -34, -11, -26, -2, -10, 35, -1, -24, 17, 4, 3, 76, -18, -13, 4, 19, 4, -41, 8, -17, -31, -4, -27, 24, -14, -1, 41, -7, -38, 27, 24, 12, 1, -25, 22, 10, -28, 25, 7, 29, -19, 9, 20, 5, -17, -24, 38, 0, 18, -23, 6, -30, -9, -38, -21, -32, 16, -5, 16, 1, -24, -17, 17, 34, -39, -25, -16, 26, 13, -18, -11, -8, -46, 27, 14, -27, -22, -22, -1, -41, -5, 11, -2, 57, 1, -16, -30, 25, 46, -20, 2, 9, 25, -30, 18, 39, -9, -53, 30, 14, 24, -22, 29, -8, 0, -18, 22, -2, -11, -35, -12, 24, 9, -20, -17, -39, 2, -3, -36, 31, -23, -4, 22, -40, 4, 0, 23, 26, -7, -8, 12, -31, -32, -10, -18, 24, 17, 0, 63, -29, 67, 44, 3, 13, 35, 11, -36]

sk = SecretKey(n, [f, g, F, G])
pk = PublicKey(n, sk.h)

# for a deterministic signature
shake = SHAKE.new(b'')
shake.flip()

file = open("../solidity/test/ZKNOXDelegateVectors.t.sol", 'w')

header = """
// code generated using pythonref/generate_delegate.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_falcon_utils.sol";
import "../src/ZKNOX_ethfalcon.sol";
import "../src/ZKNOX_falcon_deploy.sol";

contract ZKNOX_DelegateTest is Test {
    ZKNOX_ethfalcon falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[512] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035];
    // forgefmt: disable-next-line
    uint256[512] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240];

    //stateful initialisation
    function setUp() public {
        bytes32 salt = keccak256(abi.encodePacked("ZKnox"));

        falcon = new ZKNOX_ethfalcon();

    }
"""
file.write(header)
XOF = KeccakPRNG
for (i, message) in enumerate(list_of_messages):
    sig = sk.sign(message.encode(),
                  randombytes=shake.read, xof=XOF)
    salt = sig[HEAD_LEN:HEAD_LEN + SALT_LEN]
    enc_s = sig[HEAD_LEN + SALT_LEN:]
    s2 = decompress(enc_s, sk.sig_bytelen - HEAD_LEN - SALT_LEN, sk.n)
    s2 = [elt % q for elt in s2]
    assert pk.verify(message.encode(), sig, xof=XOF)

    s2_compact = falcon_compact(s2)
    pk_compact = falcon_compact(Poly(sk.h, q).ntt())

    # nonce: uint256
    nonce = 0x1234567812345678876543218765432112345678123456788765432187654321
    # to: uint160 OR uint256??
    to = 0x70997970C51812dc3A010C7d01b50e0d17dc79C8
    # data: bytes
    data = message.encode()
    # value: uint256
    value = 0x1234000012340000567800005678000012340000123400005678000056780000

    keccak_ctx = keccak.new(digest_bytes=32)
    packed = encode(
        # seem that `to` is considered as uint256
        ["uint256", "uint160", "bytes", "uint256"],
        [nonce, to, data, value]
    )
    keccak_ctx.update(packed)
    digest = keccak_ctx.digest()

    file.write("function testVector{}() public view {{\n".format(i))

    file.write("// digest input\n")
    file.write("uint256 nonce = {};\n".format(nonce))
    file.write("address to = payable({});\n".format(hex(to)))
    file.write("bytes memory data = \"{}\";\n".format(data.decode()))
    file.write("uint256 value = {};\n".format(value))
    file.write("// digest output\n")
    file.write("bytes32 digest = 0x{}\n;".format(digest.hex()))
    file.write("assertEq(digest,keccak256(abi.encode(nonce, to, data, value)));\n")

    file.write("// public key\n")
    file.write("// forgefmt: disable-next-line\n")
    file.write("uint256[32] memory tmp_pkc = {};\n".format(pk_compact))
    file.write("uint256[] memory pkc = new uint[](32);\n")
    file.write("for (uint256 i = 0; i < 32; i++) {\n")
    file.write("\tpkc[i] = tmp_pkc[i];\n")
    file.write("}\n")

    file.write("// signature s2\n")
    file.write("// forgefmt: disable-next-line\n")
    file.write("uint256[32] memory tmp_s2 = {};\n".format(s2_compact))
    file.write("uint256[] memory s2 = new uint256[](32);\n")
    file.write("for (uint i = 0; i < 32; i++) {\n")
    file.write("\ts2[i] = tmp_s2[i];\n")
    file.write("}\n")

    file.write("// message\n")
    file.write("bytes memory message  = \"{}\"; \n".format(message))
    file.write("bytes memory salt = \"{}\"; \n".format(
        "".join(f"\\x{b:02x}" for b in salt)))
    file.write(
        "bool result = falcon.verify(message, salt, s2, pkc);\n")
    file.write("assertEq(true, result);")
    file.write("}\n")
file.write("}\n")
