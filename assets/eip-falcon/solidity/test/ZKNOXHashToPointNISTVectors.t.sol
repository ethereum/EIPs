
    // code generated using pythonref/generate_hashtopoint_test_vectors.py.
    pragma solidity ^0.8.25;

    import {Test, console} from "forge-std/Test.sol";
    import "../src/ZKNOX_HashToPoint.sol";
contract HashToPointNISTTest is Test {
	function testVector0() public pure {
		bytes memory salt = "\x4b\x09\x9f\x8e\x30\x0f\x01\xb8\x65\x0f\x1f\x4b\x1d\x8f\xcf\x3f\x3c\xb5\x3f\xb8\xe9\xeb\x2e\xa2\x03\xbd\xc9\x70\xf5\x0a\xe5\x54\x28\xa9\x1f\x7f\x53\xac\x26\x6b"; 
		bytes memory message = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x52\x65\x6e\x61\x75\x64\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x21\x21\x21\x21";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(2578), 9409,5446,11883,3141,10060,11878,2420,7205,5080,10356,9921,7102,11023,6011,9087,3599,20,7901,11170,5751,3435,9682,7761,751,10853,2087,138,9813,9210,5348,625,7844,7825,1395,3704,9025,1402,1686,6174,1459,8095,1538,5296,3942,4491,11654,11409,8189,6166,5299,9446,7070,1023,7288,575,4127,4182,9690,667,1927,1261,6218,7417,11916,2011,5526,7301,6685,7671,1196,12278,1340,11667,7567,4136,10605,4460,2740,6759,1002,754,2266,1417,12188,3713,10022,7250,11942,2047,2118,9458,9926,7800,11434,1225,8524,8696,6461,2345,6570,3212,9584,11852,902,5535,8020,11218,5232,511,2979,3417,11281,10322,1843,11790,9924,12085,2168,11716,8611,4007,251,8772,11543,2578,11631,10600,11424,5082,9825,11065,247,1753,333,12060,10996,8341,8581,11516,7970,10085,2403,10978,9587,6629,6112,7858,8080,7677,3913,5637,5152,11786,7969,5935,6137,5239,12139,3724,9284,10885,3224,11068,10053,4605,11219,11437,7357,8408,11196,2873,5926,4809,9957,3091,9672,1994,4145,5127,897,1047,5719,8405,5531,9439,1373,5438,3809,11485,6882,3195,8979,7196,5540,4256,11085,8518,1031,3717,7876,89,2310,923,1685,5207,12263,3550,1723,6275,3451,5655,2160,1591,9791,8490,7642,8372,11105,8818,8291,959,1466,7057,223,1507,5593,3827,3875,6597,7681,11173,8013,1854,10372,3488,9631,6907,2911,9548,8230,2931,6267,4819,7631,6094,4903,9817,1684,8998,2386,11461,9997,11116,6432,5571,6727,7972,10041,9139,4132,6475,11364,5765,7761,5555,10409,11991,10168,11657,12040,5071,1896,11967,4211,8906,4578,2693,5837,9493,1420,6334,5660,3658,5819,10837,2481,10373,5906,7465,7562,5848,4466,555,10501,8367,8391,11279,3281,6665,1365,10369,1647,1571,8623,8190,2287,2200,6337,6082,8137,10740,7609,8577,1469,6001,266,2833,6206,8418,6137,10730,4439,8434,10389,9765,7615,3453,9780,2428,10821,4544,12266,4477,4763,3413,3227,9305,11773,3566,4940,1919,1228,4795,5853,10174,10994,6469,10058,965,7086,7250,7799,6692,7233,6027,3006,3989,4753,1429,7744,2584,9303,11600,5184,2175,581,1243,4601,3750,4732,5698,5537,11955,4306,483,318,647,9607,6258,11739,17,11364,6217,8753,12215,779,3718,6078,1005,1894,8518,4480,789,8194,9874,10458,10601,10640,10834,3488,6354,10427,11774,7439,10555,5983,10090,4676,2705,4003,6519,4434,6003,4525,8094,3662,4740,6447,5414,4424,7459,8855,8159,10700,86,5077,8353,10565,10555,6325,2427,835,6946,6906,4329,9515,8622,1665,7462,6355,5039,6742,519,8233,6556,8955,11872,7619,1059,6647,2277,5209,81,8776,2841,447,3836,3777,8029,3574,11305,3874,11476,1641,1857,5582,8087,8932,9699,6948,807,1648,12103,3420,9708,8352,9546,2769,12152,12086,1743,6860,3325,4490,463,11764,9721,1450,12103,4950,5458,8619,409,4975,5939,3304,5688,3555,957,3900,6425,6146,8633,11584,1050,2687,4941,7067,9688,1913,11296];
		uint256[] memory hash = hashToPointNIST(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector1() public pure {
		bytes memory salt = "\x28\x41\x9c\x37\x78\xa1\x5f\xd2\x48\xd3\x39\xed\xe7\x85\xfb\x7f\x5a\x1a\xaa\x96\xd3\x13\xea\xcc\x89\x09\x36\xc1\x73\xcd\xcd\x0f\xab\x88\x2c\x45\x75\x5f\xeb\x3a"; 
		bytes memory message = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x53\x69\x6d\x6f\x6e\x20\x61\x6c\x73\x6f\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(8344), 10335,320,5528,9989,8622,5575,429,3182,48,11298,5688,7093,137,8570,4554,458,5230,4251,10574,1593,11448,4377,4190,1893,7154,9808,9233,4566,9443,722,4171,5277,10624,5731,8313,11695,3162,11310,7652,1756,2068,4264,5606,4961,3297,11767,1314,1577,11682,3902,5624,241,7590,8184,6009,477,9233,6979,646,9858,8969,4219,4474,9367,667,6683,1819,943,10937,4608,11060,10367,11275,4415,2009,3953,2232,11370,4541,9684,7409,11992,6456,7926,6660,2509,4824,3415,8303,3813,8267,3126,1903,7389,9245,7927,1127,4624,8182,8541,9888,11917,1305,9257,11231,3448,2347,1004,6418,8968,6773,4789,11452,8867,10389,5375,398,8518,7116,3615,2124,3263,5472,10875,5025,11684,9393,995,4226,11477,5467,7309,8875,1172,10587,3864,10556,7750,2993,11096,7103,9433,4440,3529,7196,1414,11667,12156,9827,3303,2983,9645,2971,2674,1211,5122,10154,12000,2353,8355,1199,11317,7121,2592,11801,12029,2400,2880,1248,4120,10679,11681,11655,11321,8791,3264,78,8514,7740,4855,10494,4976,9993,169,5477,5778,6878,9977,4196,9190,533,1531,5030,11768,11135,1344,8802,1853,4195,2995,10427,618,7978,10463,9547,7256,6715,11527,5496,8904,9173,2515,2831,1020,1009,11268,9477,1359,1183,12131,2109,10808,11290,5670,4677,8205,6135,3928,5045,10148,8305,5855,4619,7984,3120,9508,618,7539,2009,1656,4966,7236,11549,2030,5062,8723,11652,1905,11030,4762,7767,3205,425,11393,9060,11568,6803,6132,4547,11244,6982,6667,4855,11618,163,6181,465,6127,2980,11821,10957,1015,10958,5032,4892,2036,3560,6033,11451,6798,7359,8562,3820,9519,2452,9608,3211,12281,432,2061,35,3782,7181,5407,2043,9958,10110,1297,5226,8658,4495,8622,2912,7296,7806,11906,11894,12249,4520,1737,1536,8099,5736,485,8751,3563,8464,11948,5336,8429,509,12105,611,8870,11685,10194,8838,2050,12003,6202,8872,10904,810,3969,1978,11970,1302,8733,6519,9383,1059,2782,95,1703,3015,3794,3737,3193,6479,3075,3698,12124,299,9602,212,1125,7121,2334,6622,4164,4104,1984,3905,8756,4291,2371,11677,11449,1670,12075,5890,5682,1441,4898,5238,3235,11164,11102,4514,4430,8043,1360,1842,5641,6150,5373,5169,1022,4792,3054,7572,7039,12231,5101,580,261,1653,2459,12151,5801,8163,1820,4125,1504,5906,4239,4747,5240,11941,3386,12194,7128,2105,10647,11464,12192,1009,6626,3049,4557,1978,10898,4017,6807,2372,4628,1903,5808,11532,11076,9736,2438,7226,6139,11303,1907,7834,9068,10798,6156,10564,2651,2669,1051,5464,10084,10699,3531,10824,3821,6327,1333,3560,8258,3691,3212,650,4693,10798,9185,3120,8706,2485,1600,8889,958,10999,4240,2033,975,6593,7545,5697,1395,2772,7037,6316,2724,1656,7063,6636,11192,11177,11672,7716,4887,8631,7241,8127,9957,10928,4545,9923,1071,3678,5170,2012,2269,1102,7743,6311,8340,9702,1179,10278,5382,7726,11622,1776,11692,999];
		uint256[] memory hash = hashToPointNIST(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector2() public pure {
		bytes memory salt = "\xed\x96\xd4\x77\xff\x96\x39\x0b\xf9\xa6\x6d\x13\x68\xb2\x08\xe2\x1f\x7c\x10\xd0\x4a\x3d\xbd\x4e\x36\x06\x33\xe5\xdb\x4b\x60\x26\x01\xc1\x4c\xea\x73\x7d\xb3\xdc"; 
		bytes memory message = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x4e\x69\x63\x6f\x6c\x61\x73\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x74\x6f\x6f";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(9980), 5689,2623,4771,8620,7396,1403,8066,4661,9192,9516,11428,2812,9340,6609,8909,7652,1699,419,8254,6319,3910,9042,8786,6350,7305,11894,7796,7687,6050,10118,1682,9435,12071,1995,1948,7190,8169,3483,9291,5533,9141,4341,4644,11003,10965,10528,6921,7758,6759,10425,161,11633,7481,840,11460,12166,4639,11521,5368,8827,4896,455,10306,5392,6593,10470,1781,10242,5030,7234,1320,7784,9975,7609,4098,5632,8778,5820,661,1531,9816,682,5311,371,1636,3493,6668,8511,10074,6828,5815,8347,1729,3547,277,1368,7531,980,8461,11108,10344,9110,4624,10618,10107,1906,6867,11172,7776,9348,9148,10285,2387,2247,6133,7305,4128,3001,3737,7950,1885,210,12225,2678,4344,8720,4054,3273,1911,5146,4189,4121,6248,3555,2043,3676,1510,11135,5060,384,7761,1392,11099,4283,7210,12074,227,7306,3701,6528,8652,8629,229,10085,8851,2704,557,11530,11660,12165,11846,10932,2583,10715,1971,3654,3495,566,3530,3821,5578,11561,7536,9585,7295,4517,2112,6182,9087,9009,12076,11201,11817,11780,2168,7175,10051,6722,1957,9189,8573,5565,4968,8440,10496,10211,9581,4853,12242,1276,10240,58,6115,1296,9899,7928,6092,3218,9166,1774,12139,1950,11830,10282,4953,3041,8808,7446,8280,4741,511,10310,8765,9080,6948,2562,10443,1286,10270,3518,7338,2987,6841,11528,4080,5144,4321,11472,2025,4893,9849,4044,10351,3191,2758,4172,5504,8195,7078,6504,2496,6515,6121,5078,10097,6604,8392,5430,4154,939,7143,876,11753,11909,996,10040,7635,7858,1508,9312,361,5063,7822,4314,6060,10985,8987,999,10517,750,2199,9381,11510,1363,5110,10809,1684,11055,9452,8529,6440,4610,3713,3111,915,5641,10563,11455,2411,10613,10080,813,8406,6103,3860,2298,6452,7530,2735,9246,10067,11990,7710,10900,7927,554,4537,9308,11715,4488,9131,7341,9833,7237,11336,3695,2399,7755,5518,1955,1600,4347,3942,2813,1997,7966,6256,9480,9294,4652,450,4749,9107,12185,7309,9018,4180,10045,9758,11299,2200,7477,1560,8475,771,9546,5645,5561,4154,11449,6323,12113,1094,8274,8937,4691,4817,8311,6642,10262,103,7862,1117,8045,7067,8427,1757,1774,4467,3089,6636,360,7470,2626,11749,4510,3645,9333,2704,2847,7246,6936,4853,2679,12070,6447,7572,1068,8434,1496,4231,207,2883,12169,11527,4334,7682,1893,1221,3834,12005,12161,10968,11501,2266,4165,9362,6160,8915,1313,5402,2641,5143,3868,5026,8864,693,3661,9061,11032,2763,9433,1772,3160,5616,10649,10779,5349,29,4903,7708,5096,5030,10462,1793,315,4399,925,7256,3481,11657,2258,11478,11727,6790,11123,3662,5742,12181,4351,1633,238,12232,1947,7494,5968,357,5537,6119,3249,9671,10244,11310,9443,7011,1593,3390,2636,8233,1821,8024,11800,3878,10539,10637,4923,10891,9911,11005,10027,1980,3639,7603,8905,6395,949,6491,7957,6377,5360,10113,993,8307,3735,5252,4480,6101,9525,3177,3353,6518];
		uint256[] memory hash = hashToPointNIST(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector3() public pure {
		bytes memory salt = "\xf7\x22\x63\x2c\xc7\x78\x51\xcb\xdd\xe2\xaa\xf0\xa3\x3a\x07\xb3\x73\x44\x5d\xf4\x90\xcc\x8f\xc1\xe4\x16\x0f\xf1\x18\x37\x8f\x11\xf0\x47\x7d\xe0\x55\xa8\x1a\x9e"; 
		bytes memory message = "\x57\x65\x20\x61\x72\x65\x20\x5a\x4b\x4e\x6f\x78\x2c\x20\x79\x6f\x75\x20\x61\x6c\x72\x65\x61\x64\x79\x20\x6b\x6e\x6f\x77\x21\x21";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(6194), 5956,6217,4177,5947,10181,4531,9635,883,8299,6642,7817,9397,12211,8939,10277,8845,4065,11386,5719,1982,6551,8110,914,10457,11402,2289,2187,1090,10319,7203,8213,10085,7748,11015,11194,2844,5439,7442,885,9520,10427,3611,596,12209,11408,6005,2916,9170,9337,3420,3304,3346,2337,11963,104,11076,6468,8995,7058,1527,172,4363,1735,5744,11061,5630,927,7274,2793,261,11739,1076,9459,7930,609,11504,4623,7879,11133,9017,3831,10687,4762,9330,9604,4917,5128,12169,10627,12107,7060,2616,2943,9581,9022,11427,3166,5639,5815,10231,9853,3298,4098,7370,5825,1304,5688,10754,11061,9145,1851,10861,582,2921,6518,4428,4213,9743,7074,1323,10341,1660,11483,7655,12041,5766,1859,2659,7288,5953,4755,7383,1201,9930,11594,3277,5442,3956,6923,1609,163,10667,608,1389,6305,4903,2188,8153,4263,4758,9494,414,10430,2019,9577,6420,5030,6103,3986,10707,9255,10872,1661,6185,3585,969,3596,10055,10140,12157,9690,415,250,10157,5453,3055,8491,2111,6375,9397,10506,9293,3090,125,8423,12094,570,9906,5552,12284,5872,6598,3360,5146,1952,11651,12213,4902,3875,5787,505,3951,7637,237,1984,6446,5002,7746,5418,881,6506,3630,9903,2827,852,8450,5601,391,8300,9500,5746,8116,9201,9892,8156,7469,8959,5488,9225,2562,4105,6486,1736,10168,5999,7101,1796,9130,7034,9119,2260,862,7435,298,9333,8436,10291,6222,3105,10114,195,2843,4742,6848,10712,7772,1751,1626,4870,8505,6009,603,9936,4925,11396,11099,11730,4563,7647,4218,4310,2056,5752,8503,6222,10445,1032,8817,2403,10833,629,10166,10572,6927,10619,3459,9521,1958,2492,4997,2178,1996,7179,6036,5610,7854,7264,1496,10441,1010,3024,4832,9383,973,8788,2526,11285,4554,3280,6734,2334,4011,2083,3673,6557,11025,5449,8,7438,11848,9414,4155,2275,8904,11289,780,4877,5205,1226,8498,7359,7291,4576,8906,7114,12000,7412,10422,9706,10458,5077,5667,8391,5064,11760,12246,1117,3809,8850,3060,4380,11699,9347,9931,7537,6191,9870,10016,3252,2002,1309,2732,2276,1983,3567,8992,3150,8918,8799,9887,2805,5509,6249,4196,8978,8879,7581,2862,694,306,5762,6809,8828,2638,2545,3095,5556,7212,4686,8581,3917,2960,3364,3047,5611,3621,386,11006,5028,144,5106,8434,197,5560,1544,12095,10655,429,10738,978,1705,111,172,11089,4384,9590,7794,1507,4690,5548,9412,3297,5362,11788,10644,1715,11875,4597,59,112,3249,10687,4991,1701,7901,7996,854,4268,1095,6072,8726,7335,10841,2894,7537,5199,4240,5251,1787,10313,3083,7255,2281,6291,7400,329,1200,7855,2034,5768,9650,7410,2931,2752,11048,8517,7969,2802,3678,11665,3626,3095,10199,2704,6313,4143,4787,4119,6890,8861,3358,10036,3284,4809,949,11338,4540,8938,1382,9190,10891,5185,3475,5640,7491,732,2505,6161,228,2246,8171,9898,11821,4295,3152,11417,8330,3129,510,11146,10010];
		uint256[] memory hash = hashToPointNIST(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector4() public pure {
		bytes memory salt = "\xda\x57\xa4\xa2\xcf\xb0\xc8\x39\x29\xd3\x10\x91\x2f\x72\x9e\xc6\xcf\xa3\x6c\x6a\xc6\xa7\x58\x37\x14\x30\x45\xd7\x91\xcc\x85\xef\xf5\xb2\x19\x32\xf2\x38\x61\xbc"; 
		bytes memory message = "\x50\x72\x61\x63\x74\x69\x63\x61\x6c\x20\x73\x65\x63\x75\x72\x69\x74\x79\x20\x6f\x6e\x20\x74\x68\x65\x20\x63\x68\x61\x69\x6e\x2e";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(3914), 8538,1327,982,3021,4187,1689,9295,7645,6995,3846,7399,5755,4011,947,3662,6618,9042,5160,12213,11074,4996,5600,6047,185,10276,494,11653,8038,9033,351,10534,3624,10875,7603,4823,11064,4459,10959,5472,11436,5013,2391,2782,8665,6563,10794,4606,3632,3065,11838,6944,2484,10688,5372,7085,11715,8044,3223,8808,3269,7677,10259,3434,11399,7283,12173,2917,7210,1218,5439,6192,10894,6762,4332,11435,5670,11377,7240,372,1345,2370,9101,8899,10669,10188,5020,10882,59,8142,941,7765,8475,8135,9146,2395,7653,8361,2236,1930,9204,11169,10423,10746,2663,5947,2658,2546,5466,4781,9584,10165,3286,686,6074,8535,2381,3697,9975,1274,8631,5176,1238,9273,7563,1923,6283,4594,10787,8281,8429,8351,9665,6294,10913,9937,9320,10036,11315,1695,11,10750,5702,1056,6780,6094,10057,6454,8787,12167,10000,5447,2311,9676,4077,198,314,3363,8375,5124,5297,5420,10553,1469,8157,1080,10146,9588,4435,4509,10185,2441,9923,643,11514,8772,1755,8381,8180,7826,226,1878,1828,2572,12227,11505,6444,7773,11957,9188,4348,8160,11521,3416,3057,5724,8827,7174,9698,350,8879,958,2206,5588,8172,1816,10439,8217,4426,9515,12148,10464,3554,8302,9354,11932,829,7504,9382,5335,4996,11704,8354,5874,5847,11940,1178,2501,6557,6668,2678,12095,7168,9518,1321,682,4949,11057,2769,2995,9887,11096,11689,10231,6419,10386,7213,9462,10384,2294,11315,8679,7384,4265,9052,8304,8306,2013,7427,7313,6082,3253,2978,8345,4362,5850,11220,3031,7160,3371,8195,4852,1693,8227,6843,8800,4057,9489,8790,4965,484,1151,9336,2434,11938,1089,633,2876,847,10223,8137,11405,11494,8188,1962,3380,3593,1109,9295,3038,8439,2822,5583,5591,2096,11622,1066,1018,4024,506,2155,850,2889,8972,1834,6325,2421,3926,1087,5597,5722,11932,8448,11423,3308,6999,9090,4044,8099,11272,10723,10959,11144,3416,9851,9532,5821,983,5077,11853,11641,5801,1506,10215,9161,10172,10506,10977,5901,8101,6374,8107,2687,1911,1411,10363,10891,5928,6714,9458,6226,2480,4994,4261,3533,5564,2160,6416,8644,2802,10907,8654,11307,8719,11813,3482,8373,4114,2307,8465,353,882,5869,4834,9221,4835,2389,4293,8199,7745,1118,12254,11070,135,780,11269,6090,5387,7835,2689,4573,1192,5021,5655,10677,12285,5000,10477,5116,2544,5172,9240,7852,847,1615,5088,10182,8656,7189,11837,2371,5228,12117,1170,5057,2077,7496,8018,4310,4170,6158,9808,9068,11947,3465,9490,5316,9915,2850,1793,12127,3068,5102,6554,7174,9078,3115,8018,10871,280,7737,7613,3293,8713,2821,7147,6323,3168,9164,11603,2198,3960,6464,9822,9765,1077,9169,7247,1188,1595,7942,5948,3738,2582,2387,1293,3427,1884,7758,3186,10438,6187,6803,9021,4352,4262,5526,6229,5020,10744,1499,7151,650,223,2947,6678,3400,7555,8338,1012,8982,8544,4122,5742,8749,1742,6411,6849,22,5012,12233,4654];
		uint256[] memory hash = hashToPointNIST(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

}