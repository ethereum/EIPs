
    // code generated using pythonref/generate_hashtopoint_test_vectors.py.
    pragma solidity ^0.8.25;

    import {Test, console} from "forge-std/Test.sol";
    import "../src/ZKNOX_HashToPoint.sol";
contract HashToPointRIPTest is Test {
	function testVector0() public pure {
		bytes memory salt = "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00"; 
		bytes memory message = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x52\x65\x6e\x61\x75\x64\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x21\x21\x21\x21";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(3464), 4265,6929,6688,7891,9017,7649,5630,9109,7790,11684,89,4880,11781,7200,3831,1956,9625,2825,1981,6862,93,10953,8813,618,7048,3942,1415,450,6514,1319,11725,11260,3563,3394,11707,8450,4542,5045,2423,2880,11557,1710,7278,10898,7701,11869,8622,3866,3774,9709,8811,3428,723,2177,10499,10418,8748,6768,1225,11805,10814,2320,2229,6356,4577,1240,575,4455,3968,372,10325,9178,2063,10014,3797,1469,7640,10912,3383,10547,9284,7105,5014,6151,5400,2940,4659,3972,5955,11345,10547,4179,9488,973,7327,4816,8435,5185,7706,5974,8470,12255,380,328,7243,9388,1306,8487,7643,2718,3354,9461,9729,1717,12154,11674,5766,3638,6532,11283,6651,1053,810,10083,8277,8845,3236,6061,3677,755,1901,8529,2261,6623,5983,6017,7183,11867,3861,10471,7922,2694,4281,5871,9086,11392,8704,2461,8634,601,11444,11445,3353,11926,4115,1673,4065,4766,10392,10502,9829,6127,10920,11385,8572,11532,70,7932,615,2499,4753,3312,5493,3488,1171,4835,6669,10870,1944,2729,8504,9424,8109,9084,11686,6165,807,1470,10634,2015,5658,7560,6964,6955,4832,8588,6959,360,10700,51,5863,12083,6763,3778,3809,937,4077,9092,11099,2943,1523,330,11682,11217,1588,3309,3563,7434,11464,3589,2067,5428,11185,833,11758,7584,1228,554,3324,4646,7680,1876,5777,9128,10700,1351,9549,762,10416,1209,6206,2151,4866,11969,7769,8702,10292,6356,1156,4726,9449,10751,9630,5717,959,9830,1271,6397,6006,11205,509,2182,8619,11994,3616,1599,306,10375,8109,645,8212,12105,6981,6814,5735,8117,8822,3116,7904,2079,4549,7464,4541,8296,7539,9062,5665,809,9645,878,4903,10799,8885,8210,4719,4948,9640,436,11538,10188,10772,7385,11412,2467,3687,8303,2329,5335,4868,10992,2755,7554,2524,12147,3701,11988,2010,3807,2854,4659,3021,10030,3410,8058,7103,477,10099,8993,1392,8486,478,4059,7121,10192,5956,11428,299,5068,6509,4975,9878,2288,6935,11597,1304,4290,3474,9489,3368,3582,10475,1967,3569,7131,4942,9784,69,1713,11136,3546,10222,9278,9358,7249,5572,5887,3800,1192,1929,4424,1073,11740,3418,10883,295,215,11517,2569,3894,4594,406,10772,9601,10743,6989,12161,7996,10073,3379,10636,6807,12197,7805,5531,3811,9170,7308,1101,7215,2110,9021,1874,3194,466,856,3474,1679,1404,8014,10128,11246,3166,2360,8532,4312,538,9353,9554,11116,7730,11758,3732,3415,1946,7230,10984,4919,6214,75,10808,3962,4213,10705,11826,11130,8562,11259,843,8709,11248,9296,2773,9756,6958,4053,7149,5567,8207,12157,7443,10924,7680,1116,3777,2069,6300,10749,4528,5966,10398,2062,5941,5159,7522,4406,7584,1379,1381,2405,6618,7338,5156,8683,9305,6257,11491,3019,8951,7453,11287,4834,4941,8300,1746,544,4873,2302,6297,8694,2805,1237,8867,2849,9692,9808,2354,9417,10693,3504,2938,4347,5853,12167,1771,9576,11979,11364,9023,10152,3792,2514];
		uint256[] memory hash = hashToPointRIP(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector1() public pure {
		bytes memory salt = "\xcb\x05\x01\x9d\x67\xb5\x92\xf6\xfc\x82\x1c\x49\x47\x9a\xb4\x86\x40\x29\x2e\xac\xb3\xb7\xc4\xbe\x14\x1e\x96\x61\x6f\xb1\x39\x57\x69\x2c\xc7\xed\xd0\xb4\x5a\xe3"; 
		bytes memory message = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x53\x69\x6d\x6f\x6e\x20\x61\x6c\x73\x6f\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(11245), 852,8116,10704,7126,7076,1412,7740,9375,4641,9386,6044,2027,4770,6690,6999,11164,10766,1938,378,6372,5147,9168,7060,10051,841,2265,4099,2875,9307,9180,7500,1498,11425,12264,5906,7668,9805,5393,12163,9576,7608,495,194,1949,7786,11995,4588,5783,2561,673,7618,2825,9765,9396,2526,6347,5254,3052,11846,2845,4115,9548,10000,8562,10276,6238,7666,1191,8485,7201,9704,7615,3875,5001,9018,4399,9186,7583,4960,5423,8430,12048,5572,10142,2138,2278,2400,10953,4530,2968,9506,3933,1800,11640,3888,2679,4167,2092,3732,1405,8854,3668,11538,198,3591,8025,6092,11629,116,11610,11208,11222,6970,12151,7269,12257,1466,6717,8115,11577,1524,1707,7852,1606,8374,1149,10068,8538,5668,686,1835,8866,4670,4563,5052,7546,9767,7809,8707,6909,2974,10306,2890,3012,9991,370,11921,10307,9031,576,11998,7835,2935,9768,10480,980,9198,4701,1060,2749,9244,10217,3195,871,7317,2584,10412,7587,756,8691,1521,69,11835,2138,5671,5734,9925,7930,8040,577,2366,10143,9966,4380,7894,7092,210,5807,2950,10771,6983,1741,4021,1509,5796,11987,2987,4549,1489,11281,11475,739,1150,3302,6071,3288,8783,4432,4891,9466,9355,3455,11121,7107,10784,11202,789,1766,1667,11197,7268,6943,11483,11502,3179,940,9798,1622,2785,8934,11909,10759,175,10977,8215,6600,7830,11219,10625,9058,5377,2465,2334,7688,8107,6149,2494,5878,657,9884,9653,3921,7190,7753,581,10204,3090,6075,6793,4335,6304,1841,9533,4340,856,4421,12051,2988,10075,12256,9171,1587,8150,6626,9627,4743,2176,5206,2921,1445,4570,11471,1430,8545,8311,10172,8279,8374,10906,11674,7417,11064,11409,11783,8703,5075,5999,1263,10833,931,9281,11664,11623,11614,6456,3802,11627,8365,2490,9960,10391,10630,6536,4871,2391,9469,8037,9411,6860,6110,9028,1306,7288,10448,341,2966,4697,7231,3237,6168,10149,2141,8237,6538,9743,4858,10667,9897,3721,7657,9845,7272,5616,4321,10917,11696,8848,7589,181,11395,7487,3512,4671,7602,8956,4557,7129,8605,9216,0,7190,2804,5778,2365,5836,4453,6466,2452,9581,10178,8198,1686,10855,9654,6273,9913,1520,3899,2632,361,6983,11151,6050,5711,4608,3129,11162,11952,2440,9051,6812,5012,1144,3112,8138,34,7866,800,4922,11018,7240,7591,1166,9382,2692,5808,3921,6026,1753,8136,2695,2510,8525,3041,2641,9725,9921,10944,5748,1888,1008,3834,6497,894,9451,9905,3388,2155,9272,2822,1259,3891,2977,6504,1003,4263,4459,10739,2786,11757,8285,6055,10152,4341,11673,7,5175,6282,2308,5437,1604,7005,7355,8100,1666,4296,11816,10420,3572,12105,3795,11099,8452,1128,10726,2756,3529,11996,11936,12282,1012,5728,11363,4907,9640,12039,209,3504,9107,7907,6231,3159,9008,7398,9623,642,8192,1586,10520,3849,10176,977,9481,8575,8606,5379,4102,2170,10980,453,7537,10443,5181,8022,9598,250,5248,4881,7733,6949,11578];
		uint256[] memory hash = hashToPointRIP(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector2() public pure {
		bytes memory salt = "\xdc\x07\x22\x3c\x8e\x92\x93\x7b\xef\x84\xbc\x0e\xab\x86\x28\x53\x34\x9e\xc7\x55\x46\xf5\x8f\xb7\xc2\x77\x5c\x38\x46\x2c\x50\x10\xd8\x46\xc1\x85\xc1\x51\x11\xe5"; 
		bytes memory message = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x4e\x69\x63\x6f\x6c\x61\x73\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x74\x6f\x6f";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(10249), 3648,663,6772,2769,4297,10927,2569,9429,5708,6235,2938,11246,11699,10799,3493,4329,5521,7422,3703,5041,5039,410,5074,7867,8730,12206,2533,10923,5658,5965,5921,6202,266,111,3420,9537,2309,3109,1061,3468,4937,12050,2593,5967,11475,8848,8940,4832,738,3756,2191,1021,3909,6586,2759,2791,10838,5651,10016,11028,9764,1242,1237,134,2173,10838,4356,6523,815,5749,30,11487,9893,5952,11848,2774,12207,1001,5452,9581,2341,4893,7842,6998,8618,8161,6038,6703,5010,11141,64,5416,511,5833,2951,9718,11235,12249,11545,8002,9231,4554,10602,6239,9204,3872,12241,4049,1160,3517,6395,6648,8985,615,2208,243,3992,10022,7016,574,5679,10172,2534,12031,9274,11498,7115,5616,9915,12279,10165,10225,8748,4584,11257,11452,3090,4401,9260,12078,1880,9404,8930,4024,2466,7834,7769,1520,11579,3784,3422,9925,5754,5628,5342,6260,4458,10431,469,1780,1829,7022,7533,3716,9969,3587,4939,4946,9418,1302,10966,11950,2497,7504,9317,11658,5146,1692,8757,10362,10329,155,11228,2305,10846,11928,6095,3171,3683,9095,1046,10881,1005,3050,929,4677,7304,5288,9070,2813,9937,7529,9141,2169,7402,6706,5085,6497,10236,6623,10357,8265,4644,388,197,5314,2294,9939,3077,9682,7870,97,10110,7078,6070,6,12,5137,1136,9329,7089,7754,10781,7998,4507,9484,174,6969,4556,10493,5352,2232,5703,10896,12220,6449,7514,1612,5556,11983,2870,7206,2875,6435,7393,11373,1994,7392,991,8802,7894,1046,11756,10181,2400,2203,4520,10290,7193,4889,5848,9849,5290,1939,8108,6405,2384,1978,10921,8816,2263,10165,908,8762,2332,4281,10941,5608,2062,5648,8971,2607,3342,1343,5102,6753,8615,2959,218,3,5267,7599,1505,1356,2626,11366,10721,8848,11880,11245,9493,10796,10658,2856,48,980,2971,4625,11418,9645,10580,10072,3835,4494,3226,8725,8062,8355,6277,99,3965,3666,7017,8853,1882,4279,12259,9595,6820,8261,762,2959,8240,175,11990,3944,191,3687,4718,1948,404,3535,4801,4816,3556,4887,9129,6054,625,9415,2700,10257,2526,5563,4153,3827,5074,2382,1934,6792,9236,4327,5648,3728,1015,9039,10850,11344,10411,12057,415,10489,2248,6761,663,4351,1455,5478,6651,8233,7207,186,1828,9956,4727,6937,10912,7883,3117,3826,2670,9535,3521,9256,2306,8468,10846,12219,692,10361,164,8134,5344,595,2315,2200,3820,11659,11727,613,534,6488,8559,8102,2072,171,6812,9259,73,2281,4869,10394,2970,4926,3387,2081,7122,11921,11437,7452,1665,8923,10061,10532,5096,11391,10726,1066,11845,8131,3923,3517,633,3300,10510,1007,4036,11617,1828,8402,9530,10721,4697,11370,11459,2959,11856,7661,6282,6649,4142,11196,11393,4828,5375,8958,4164,10559,11497,5410,5733,5327,9047,1423,8129,583,2925,5305,2444,926,829,10040,6446,10475,10624,1497,1588,6032,5863,5034,7771,7944,9347,7430,11916,2023,843,1133,8336,5442,11131];
		uint256[] memory hash = hashToPointRIP(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector3() public pure {
		bytes memory salt = "\x95\x52\x2a\x6b\xcd\x16\xcf\x86\xf3\xd1\x22\x10\x9e\x3b\x1f\xdd\x94\x3b\x6a\xec\x46\x8a\x2d\x62\x1a\x7c\x06\xc6\xa9\x57\xc6\x2b\x54\xda\xfc\x3b\xe8\x75\x67\xd6"; 
		bytes memory message = "\x57\x65\x20\x61\x72\x65\x20\x5a\x4b\x4e\x6f\x78\x2c\x20\x79\x6f\x75\x20\x61\x6c\x72\x65\x61\x64\x79\x20\x6b\x6e\x6f\x77\x21\x21";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(10903), 1054,8629,6968,1612,5842,1049,1998,11129,6973,2716,3449,7808,7737,2651,4684,11131,7318,8234,11960,2920,6879,1910,4896,5200,714,5273,4695,8560,6739,6219,5025,8533,1010,7946,10183,2189,7682,11413,11026,11450,6404,7280,3683,12222,11767,1648,2380,6608,11705,10251,9660,7738,3790,9893,1954,9689,4170,5631,7269,6058,6244,10786,6153,4346,9851,11692,10912,6034,7731,10435,7917,3730,1573,12278,11178,802,10743,12006,5129,10541,10686,4014,12268,11017,2903,2347,11466,707,691,10094,581,4615,2404,6118,4396,925,2432,10462,4941,5042,7800,9088,3536,517,2739,7625,302,10858,8645,4043,5095,5161,5713,4544,4817,4634,6989,4661,5269,415,1820,11511,8815,321,508,5013,8479,749,2287,7805,7788,1285,3319,1377,9535,2387,7285,10275,6074,4635,7690,4062,10986,7325,6129,991,2068,4866,3698,8970,4588,6094,1030,11367,11683,598,2951,1641,6112,10945,7109,1994,5669,7510,8181,3346,12280,5255,3258,5848,618,6670,11294,7560,882,10803,101,1560,7169,9340,7766,817,3484,9710,2789,7281,9465,1684,12212,1098,3498,6436,11569,348,1308,5376,4423,4681,10300,9731,8662,511,2126,1582,472,5344,2914,6072,8012,1914,1996,6973,5119,6233,9202,5993,466,8209,2563,9444,1568,11818,9243,7364,6718,11947,3294,2934,5025,5129,1995,3650,5727,8133,4212,8507,10882,2825,8641,653,4167,3003,3502,6897,2627,5342,8719,6735,4838,9707,10462,3642,8518,4753,2174,10244,6273,11840,7598,8414,6684,2448,8040,11058,1742,185,7591,7626,1470,3728,9598,7411,10527,42,6857,9613,11117,11536,7170,8572,9554,2635,1302,9953,12111,10762,8216,6819,3778,6290,9646,4172,8611,727,7336,3257,2131,2967,3115,4397,5482,6852,278,11627,1247,2073,9412,10405,10833,4866,2828,10985,8636,6297,2124,12238,2571,7183,6844,6366,11251,338,9253,5772,1285,9762,9227,2697,5386,3013,5377,4978,5728,9964,5047,1377,6370,5780,1682,1273,12286,1624,7928,315,8526,2289,7192,3896,5556,8889,3064,11502,10533,1471,10055,6507,2617,10205,11229,5015,5532,11342,4740,1141,10731,6920,59,7069,3081,220,8255,9888,2451,7820,5985,792,8009,5650,3987,12048,474,11580,4023,9487,5177,1795,7539,3237,6691,11528,9296,11416,2785,83,25,2557,4350,7339,1955,40,11435,12189,259,8484,231,7003,7129,1123,1581,3366,261,5548,46,10480,8418,1131,6949,8725,10913,3509,2087,5772,413,8425,5934,11986,11443,1306,3172,2287,1006,8330,10027,2443,2183,9282,6215,6159,7439,663,8063,11967,10759,4743,8276,7765,891,7591,9487,9716,3182,6327,3157,823,2231,3508,6927,11145,10512,5871,7344,3859,741,8546,8378,4266,661,8716,6080,397,5801,6599,6621,9231,10052,3715,6049,789,5640,7298,11255,2479,2282,3802,4666,6660,517,10072,3823,9936,12067,3642,4199,3932,2940,2414,7073,8690,4234,4621,3541,10118,9974,599,11490,9635,11889,9919,8626,4367,5239];
		uint256[] memory hash = hashToPointRIP(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector4() public pure {
		bytes memory salt = "\x77\x23\x13\x95\xf6\x14\x72\x93\xb6\x8c\xea\xb7\xa9\xe0\xc5\x8d\x86\x4e\x8e\xfd\xe4\xe1\xb9\xa4\x6c\xbe\x85\x47\x13\x67\x2f\x5c\xaa\xae\x31\x4e\xd9\x08\x3d\xab"; 
		bytes memory message = "\x50\x72\x61\x63\x74\x69\x63\x61\x6c\x20\x73\x65\x63\x75\x72\x69\x74\x79\x20\x6f\x6e\x20\x74\x68\x65\x20\x63\x68\x61\x69\x6e\x2e";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(1307), 11640,5432,10275,8914,6939,5097,6537,4218,8325,6134,1773,5907,714,169,4228,1070,6933,10756,609,5865,3373,9294,7175,5813,9396,496,5529,9192,3202,10248,5293,5912,8137,6913,6825,2783,5218,6709,5603,8037,697,6793,7934,116,893,6175,5047,1476,3376,2637,11573,5912,7489,7297,9957,11774,7150,10565,8924,2870,3740,2680,10369,10408,8494,2829,4822,11902,8238,8355,5453,5068,492,2486,3939,2192,2144,8332,4321,2371,6068,10953,10937,2541,9220,187,9039,9651,10847,1400,5529,1352,10659,11854,3557,5728,5458,7080,5718,10883,1631,12264,2818,2792,9370,696,7585,10036,10232,1345,10016,5888,11080,1780,3276,9478,3266,8063,5048,4349,1513,9091,9727,2311,3940,10264,7138,9400,11084,10222,9945,7564,6529,8380,12096,11606,8297,12154,1903,6124,11601,11416,6758,2873,7414,4513,12252,11918,6257,9045,2072,5423,44,1104,5812,6728,1729,5770,1503,8100,8421,11093,11209,11377,9363,4972,1043,8655,7285,11108,8376,6121,7843,8132,3092,9474,5663,4154,6376,4014,5508,11408,1905,6898,3469,3878,7004,5556,11025,6449,6277,5775,10304,4389,8193,10008,6021,4866,2666,1782,294,5397,5179,10797,8903,5463,2167,11788,5850,12109,7926,11894,6046,7687,10223,6121,629,10224,3407,1016,8587,1654,142,11117,3953,4061,5732,6249,70,9609,11542,12105,6606,11373,8677,4786,1381,12118,72,5302,9975,10500,7700,8099,10353,1065,8816,5906,4261,10775,1909,10886,1276,6586,5692,3442,11981,3060,235,4313,11263,1017,5085,7780,11044,10129,42,6598,7214,7565,2070,8302,10784,4372,6644,2685,2202,8898,5559,6276,5288,1382,9060,3673,7638,251,9709,10647,10218,8782,7249,979,9615,10397,7213,3601,11304,9402,10263,4647,2134,5973,4132,5068,5625,3268,10475,7777,7395,567,8551,6710,9428,7920,5372,6029,1132,6509,1022,4077,730,10118,7124,9220,1544,7528,5687,3140,7213,1829,6937,2246,3330,634,9192,993,11014,8790,2151,7924,11554,4214,11945,5482,4023,9362,3661,3300,2610,9682,1207,11274,10090,3599,10021,2689,1310,7965,6689,5151,9613,11934,8574,6360,735,1724,110,1786,473,9767,10520,10507,11948,2461,5186,3756,5890,11244,8229,7933,1326,9456,5513,1417,11596,7301,997,8439,43,8117,9610,9160,5896,7772,2303,8235,9025,6909,2330,7574,4907,5202,4231,3212,9054,420,7483,8516,11462,1330,5667,8371,2935,1151,1048,7972,5097,6766,9574,9323,10263,414,395,3400,4897,3574,9887,1582,7548,4217,11418,2824,8172,3523,9971,7249,1818,9679,3449,9946,879,8090,7233,244,4623,7607,10930,8252,9253,9087,4096,12170,7048,2814,8950,7628,6246,11007,1682,5754,271,2080,8641,6782,5720,8159,9540,6576,6466,6190,9788,10114,6766,209,6764,2024,11647,2399,7504,2456,6093,4050,1692,721,8306,1721,1321,9437,2469,5449,11083,5717,1840,3457,1496,5962,11192,10881,9547,6812,9331,9493,8212,7185,2760,1149,7609,11068,5287,9762,82];
		uint256[] memory hash = hashToPointRIP(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

}