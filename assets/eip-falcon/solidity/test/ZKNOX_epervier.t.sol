
// code generated using pythonref/generate_epervier_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_epervier.sol";
import "../src/ZKNOX_falcon_utils.sol";

contract ZKNOX_epervierTest is Test {
    ZKNOX_epervier epervier;

    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[512] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035];
    
    // forgefmt: disable-next-line
    uint256[512] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240];

    //stateful initialisation
    function setUp() public {
        epervier = new ZKNOX_epervier();
    }function testVector0() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [201423940285787045522507729602149508395365532705891881344491456416787202309, 32133754196086569135053303972173982904109399036797410992604389637793906927, 12368581437322315984293601637549747238850628387691183218072597660497358738, 21591198619089058527731665868133865595503255901616211445826923805206770221116, 90435604380877901703194201635088798483067575175146992840492184672516517744, 21318777443486207071695779286073027567860315115972130948830460402402371305609, 243826328839905037594221364339965420619868292427160485239314501675523309751, 21555534702578546584638611791800245713955056148947289218192088524017999413285, 385500740701103855477492263427860389221851937018343110141547270054545522857, 21463660223817244573180380966640605380719540334035181311932265969669199048653, 21575299012544071576823573201906042879218024911075925887013128770810458800204, 228252780870593830714218514277803786821091296417356897463759012905824628698, 21465755006723603678555228216791419352986880424977829910660197348788709240651, 222949700427754500431236692400199061573713146385694796320914219251083128760, 21702509283168700672710533740194417761118671414604814584839032136074548490083, 21495461826470936683557230909045164575421094051582884795387739231640397873202, 21523739521349167430567981470966547322541401183982530739614179706997347266323, 977395311319620538516659677818263919570491063350687622814114913507970592741, 21191569464425855955821540387728096802662359023903259400095023688463644241861, 21412747491890016394089486647339432753098083225222993911398070391875884887899, 373133776865032215728863566290106537320341439437775840565699493543192965087, 21654807049648856598620536358380133720529771005608700759202485584735745605880, 258281384543671877541269975453183883173413364003202826906975757022189387971, 526525471839356224292207269260173990649717073963884484513187835707783184429, 21414517574185493047590009126538716267680651759414252589727169076039860879489, 21502535172854069399947748806558071954402873286806615767212856427420956307328, 21504299345961189094112674228681545354153832882453973661672177230777513881562, 79837438700120453668260547224427090629635563835734234847713892806314176350, 240622484659190166381121207645179978359727015982997517792563026901327872116, 521220153726444879186478194185418948590929276480410495726597155606228369678, 21642438284304187789356283772203657207173197715589092530419688966362928394196, 21449526278189215175334777925165250938748310334310858310875231049957948141505];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21299671975787483454790402018496259712325154098698828370862796902048963440524, 226482644561092801897613003311591793491464477287443953390217386369311322015, 122241768215234212762829461233206915525091542269434133652196666067046117266, 17998600124730622827465990899026975431920967581729901424009026369714323515, 21156552726390114447912652470199481904643883857534790873521589824973084372941, 166414638319359694539675323431761741043307735201951903340794358417336827986, 21451614924126190838060080098931214529037792752475566277715416002725544210312, 21619468086225573149428575687681504604739876340506400383036250394919471022197, 21354444752013408991527203716041803392832851588841014790823564527783031812068, 40637590359720631756101950821212066384251755770640449468737583935557545897, 304228256065111465341595114396824176330096899003450390299007497041692078041, 21151253506241730037214008021307237001806313126801305624031661634239557730460, 120468666454760826934618408257990251737086348137219304739400371046851555278, 21432184616009917607269660114506949891222288898806366184877936761055983775547, 21518433259746648670717331844331216366351090502579212557941552317525499248692, 21647739391709647690802008982923383029008210205554608875280491239402655592366, 40964884159568868602122268505814142421304112730977685866577034491435560785, 134281644066644075952295235160147398920909894081157681132255108571974992066, 21691911382121948660240887888667851751942217725501296445477391473357788557231, 21696886004442863450261761150950129663128179474933041610268931151502459731982, 404610463137767168486106082172428680248662411074833208161405963809904656482, 91879772852911984237518509646383898093449686531778472006833239623202058238, 164644178638518845312982181671048221605431573972257798857853361098856857728, 21574973686812103371699961732701920024338479494313547651614704632000563981947, 175245562549033153724892418326575979114467271119590358939154166249244262574, 266796661751086246441058213427294247068745218289871840260809319750822854698, 97183598268319474873784359172567103256595448544293089836817574924407079179, 86576072396373326456075399840772528545065258380973319625452012942335356845, 208817323379001257158570910002768001779019792526753026636949068845966164023, 21082022843605336096552002185742069167530055866640863550830674291014571601566, 21458687219065978677109946072223714604125558224559441365838144304995083419665, 666423492797790993818496611161184796611027378170087972178025157084774543202];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 7633;
// message
bytes memory message  = "My name is Renaud from ZKNOX!!!!"; 
bytes memory salt = "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
function testVector1() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [91880334070341708354253209016552896771401252016272598371312017051015446561, 274189235875515780707780072517840777771152700802780290631970873912088264722, 21582042935371711456968321445370723337668429501288685844752108287985893769317, 696138471507138162942883904227163825560852076459391305151830375930367967285, 21271398491453801503911596102421896435554981283342994350678678499862364356704, 215562351531470087002317017163694218415802439493803024361713768711598440559, 478816956525648704818048701871006408578045249120615450119045951241263972520, 21352352412540628073695785457827210609975503252197849074085548150387748843346, 167853409791089030081308374352513846335505354796403426272774026809941819678, 21467520429929997765784896686009185449449164773120907416091596979053695205421, 21667171743802571098250965583445059792663574112849375023880169288156102078387, 798621748109089884760286828034499709106317831890407341542620641323308625671, 21686609838448055327497174872668014424511706129066466069123567672817302777747, 56866130234284593995532360527995338646370851097409911098113175209228316669, 21083788698036281448679159709621304066318763583738939673025228573135623761868, 21555537695097248365705778613355750148853758335791002406553748257728263553238, 21454835424540094546113150377650217179903958352696880156336857187427398779193, 21647740820599162891481958326161230290213200880632094135665509799690593513456, 21677772345909112102631310412336877409265092039166675448742312427472586419969, 475608458225761267303743398971101656288489204935084399482825797634124415030, 146977276691780092177484982286222238195973160617633582016743928529450512036, 310969693597950247836322589532288351839205868595746649533403735733580267626, 37433917961042080973681579253296553194321567433085897301731918896184426509, 88346294314146055547050480975651109484546503937753865884705498382370471969, 537127600660398330335781445249712135185583179287736110390385973612435419111, 88352193700981545321895515574478939492016299483652588373261990898089734010, 21423020854204300243196951899238157977774183069131904553738848653132332531815, 154046358440418946495720895119872386502212493938955595822547812384881979156, 270329870499993245501990415054398847253050525112568134338064943472466931698, 21635048055699568725768872591018673449371454203392871427996745889634263040175, 21246341890164323932797410201367048237799731561916521027478281425911519784546, 21301108244853967594834041200457675432505860965100235481168533165563714470151];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21241362652655976118052199738235297379325563254953854226625614987286433836928, 65375368373742722157214948405964137758857493268308077350612892612857888838, 102481097908329645066155600388496319418636965790880552454770268435699728586, 247688367958347251749337001357579512481367309409638275407838209986886643513, 90437200069429427158125921095192088302333716993587210639485685234093392184, 424047932776192299526560151220007938706815957277540503843124559375880695741, 203515600918493380796458559261420530038350127902910870552738821966457548479, 21544936154468057554472235014038110957842133360011428144959465728071147925493, 21633279774780377574883650596281968455988710509682201138221100532534706569223, 49472176253909231867607541964089578932099198737062887170875549484748320594, 196446886639740790448194920598584231368088948356772786367850759287685251231, 21652711884232620729870841695058715550814755646364260060029427447644326199428, 102478294072977625242866455938561081240915409755611054537591354703233626054, 21613844645784636943769898634608591714818373956639699433812510071175034121999, 432884653254941768391848914039078205182145686042362242005180489164058067099, 445575320271567241723645307060722568272703664212263426657696326372162678571, 558652696654923771226662552998569869429154917463958753161753922288706912287, 21559392428289741853787546523632316279010843902692564740108831950166325264518, 21426883405608288618915788387342588926353781352336830399197796994299383590654, 157580488805240532862876267216340492303932205674101754885598981813739520099, 300364081951405736215370224586136005544499828457697163782835287578010976330, 21577067023821837132598008687985064695490659146733394035889456955906746024173, 325106389251761834051311048554344431656621434269107927599198160367009672950, 314499478495748428795885977186008766550868094190669122231985676789937078592, 21647415387051267797314241493180087533922137770971668710580416218381840351453, 441713518655715946745608651902942524707662664110049614148065830299300147156, 37432538058685187264630883247500900822459919514017619833093053468466675835, 321568834888150370892269302975636918525760523818370138911536123960250281754, 21336446475381451033353688457872494954546813289576818032761776234254351216557, 21645645709179260160038781534411079709429751031465681914748658212864096022221, 687303567084482440378524283164525564580336229696693382039363140995221094454, 21617704128886473622812310158531905399220067085899824499312662204774429372385];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 5109;
// message
bytes memory message  = "My name is Simon also from ZKNOX"; 
bytes memory salt = "\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e\x3d\x1b\xa6\xe6\xd8\x9e\xdf\xa6\x71\x26\x6e\xce\x6b\xe7\xbb\x5a"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
function testVector2() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [21537873947392276052627392934179970527176569160499324608697063410384071765752, 21686611294210640972274547553560497692907005777459268589886574914400354906001, 21661872663438563979394308342248369010965550390454234752345173984363571708033, 21414515314554699227884747026316974125537307289819963602369512918073098121061, 150510701194382038970407959580628478158617335126540734313198983208388591804, 21656574063313567496067518052050081931391913577748439566750217185037939114140, 249125468144650321108457110583980148538952760814145026404882436951270555656, 21122664078382884556480851717025110502056846845741791211830593081500718870273, 124003461019266333523393340508304749285159033029874722810284915848104902764, 385496556988899834572933950363838646347408461446743471530192362103300948007, 100712040114348871869301955061010293566363931654885643049636602207706951517, 20949832455555403532341002410109483345862253711087376534436087702469698322484, 10931158039929565051057827790066349487721038966357953831842340593693950006, 21684840807555530956364401087832137514237171945239941676643022304698183856051, 21587665216543245293138212813210685056888014591421816310126453546999169482785, 77746398203368822685012436665456880505754920959790307631367740423518957356, 758308005657806946092809273785524280078765314842174722321524578580006961242, 465008287518680435685317841245758521398225021997449886179644549767812022317, 21449852417596782686335742671713163808228175311426173582960454685942851829910, 21527594631953915741182575220614914167570485607356056328697127168666293895268, 215557957067978670934394060875677716000902689909647068238883000764355981226, 21495790414256899157091173457088877410259873826623335346487799351717537918852, 3863122763487944557386919156254047581983523078286660391436765241320603674, 261497171851588928289495405510591826020965847977261626620087617817810382631, 51243282993475679356579771457896563756080391170184552248498898699297501070, 20916265331915658871054117449533303829038011280903812029914297471287392153578, 21168922731847826552537050999853563535280087390186935339502124777303409962971, 28600383592060455779782573952944150920048640015012460667392289147454488622, 21348815294475629273593246245263324742544972590786291979857556902705805787240, 187614489549792488725940322197008525167447859535668342225611092562953568299, 21545259565929373966394501735260301987851960351924385460721829986338688335882, 275628627476693340957617090504117195221509423007956133580544224195666587401];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [438507824205089640972760134708744414131363728097035375280221786930953989871, 21285531003446832039593350956309507404085976633276150144249225140095877001190, 21654484209140035008701079162319714036350315974988936192439258742687414497055, 21493697756301234205602557722819002073332163434913530721422544674252713296063, 88345189084196441299202350312682907469442054353667466318248683090904023167, 131077346576497680175392531762192866255282984175791557170003612825933786953, 177006716102298952197215515631230931816430713019631598176121733059394207778, 21491931470392179361849185403183070056916891995365675302296865598533866434483, 86575996411086247850578638715646469170490957207456164809716582462443356214, 7398353581208179950435073878422066241340503694215074625095688495868424165, 21689815403056851679283929301754067295214816133186441796304032186346809470907, 21143863326532942848664576346776875000654350068162263188314303230970255835273, 21345284463049684349984287019173520463422360918611039194855655206364930244803, 21387685848998362512428851950109303451524118142198859295186751114531630743760, 79827377742993167492038892082717440190645404876377345389651954053190910002, 21006048963919857542599672603573653077137398723952501488716014217733555564434, 71004357681219425266644471709000361195628839513403616653375518986849890093, 164319742635801140536255290751507782101535469123595404086134158614306434947, 187287271722403714104755383936057917871433727111616801971907291637556772948, 261494147541663078951383973690473085947874121977953679057550398098029871258, 21246337598522166928773501728619367925035026120158260495005960491691459346562, 454084229946101496349967253456717555131110851464142760327341749176413978703, 611656841511559548937930402449138048059535223414169511081415155544404787391, 240303229999418465356777938309266894947834199388312950338715723097367785417, 35665561100581060717566596353455697854370455026470916878328177684907765659, 21667173280530150913708115996663455508682318479996563194373799457807756361785, 288321914479509591786553347721489190427807492267754991197069668241054051976, 330403474616589437510921568961998693717377268851210253236470113529092779663, 21626210634097993538828199159505421597095588352221066395609467058618145374246, 154040373349537912288959426491500243007795112158426691995424018007345791045, 24739525500446611412211982150199363983364193566776689684469048908890386391, 21384150591197993763280514712855187768498395264345193953194445250749291233610];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 1725;
// message
bytes memory message  = "My name is Nicolas from ZKNOXtoo"; 
bytes memory salt = "\x13\x57\x9b\x4e\xf5\xf6\xb6\x42\x65\x63\xd7\x19\x5b\x8c\x5b\x84\x73\x6b\x14\x26\x61\x60\x34\x2c\x40\x93\xf8\xab\xea\x48\x37\x1b\xa9\x4c\xc0\x6d\xcb\x6b\x8a\x8e"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
function testVector3() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [21357650316642851685059577167725272338676511073732351534372454127787255857347, 21578506707009712141958370865190342677846561017146126024026409012520926445611, 157577895741820586498046090090428208518333798738582071631386543545573441833, 81280572714608884189369724878527144663817245010519532309165489323040780221, 14137526503133003656187320881027414394643151519802635686278720261736038403, 26831271858852760800221547632116737041062853697219050449910447637614899042, 21396519253567065294227346921695142190759390461031524997533797444197421875361, 21599706526219448156694431499482805685061124282594853596298940026291837927606, 21370345669670922111054360020397498707319660365875017662808896376983694159789, 21451300350475682608132739963144220186260267642172480394725067551272464559926, 132844058851415523835930332483799203234559965573111446479518315466168217462, 95412464587167169296923731170091767699389484142835309849021074513362628578, 21410659449053419062363140256800009402054432100010336387078411149321134682031, 21458684927377130333802350719632085775203718130637225357864000843314683719464, 21679544337302522376305928052262240007153899393883065336668446971632363515771, 86903959206930995821150662954486709424966775002740700140675498586858663731, 21654806860820216149264574145181249324057465214101766654923077044484729602214, 636390004445181114650846175368466635888665161806138318740892143919976153244, 21583809463838834437200679724289040102212111200674363541559236444043839013054, 21211003897445233062622937563968086505276468803965026963325717969219118039182, 21248106796094431008828208563815746634465734036871605174272017151201080639749, 21506387366857449673190443589685177892732359905016490520357422900680456798243, 341328049396681521821332206905229729604143389766983833568396887283757744235, 20850564130660917368489673042003120373425999574828438386904702573288927473566, 168179382512747847169212373539481894342365452533462476024530695396616831257, 21643879325390321682217188551035051024087667718917057257144947686685510533292, 21650948034678930960196820916319047179740533257691537983516744151842943533098, 212351831244295167658454581727233307183229598704455709279921942903072292938, 114848730768967161056111468069297400193562485699767440394141829636906549266, 498580188055126588789560658408259376903535173963962165097322703421326110531, 367829407345181961343397184975344473502667670392719304491021661356828864445, 409910298553729796474504910410442432340533832922490360832740288918457495490];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21650948676788206408616676865061874369357514273323295703176449768972042645469, 21329707728860203642681203613816952039377654493716079924808629148818339868573, 21461896283508779059953341713944897004528682723865672884771780213166886825949, 21448085166106476428974929805984002999594957567360103306882207036040584232994, 21573530283204319440205758420650077351168028205304493779377694947305461591933, 208493161958338545583065282645586504005166413428643258840717522583163764841, 21336445235179810612169260987868823133046066823476118613080379587682576039987, 95418395753705944245569286927238146525615718792237204036978270498968186756, 21276702964070422585158097434604232149622259925288830978111726636009808724022, 222952369479417808052277785113554472621447742038333554651672165772181504093, 21509927374599992022922680669793048770814841703785930581932056358464155615489, 21230439452833164641030680499996212239947872632341540063727044860461860466599, 21391543305108933424208980586531051995211164976735071923121292205229461340199, 184082898268848539135932891312320241270412338676644588650265429376970469113, 21515221710039152440085383355600880574430863747751685829614006623395600269379, 194356093829012125771853365325808205879888760843233078638268147712504889556, 21386245459944567500602771668037512929887473472448225551972338259898784612366, 21260474321206196542825715619530346936076943170172662056288561295455898042681, 176696568891808890194631255202747177623385740378002378688646651043936546798, 21506390930546338503529443465044092526605359604047860638631507704352309837915, 272096038707752631423548632940154510336907236738043123488698761691006697514, 21448087075264057404932834971019133857903875259511892949204072443259297017856, 21555537991767732993204997538959611880667152345823531433193404481213195825041, 254428058285471908470785315102648538821372771242736974212324977590676684955, 155489012158866404720540155613581104913519785611383402870236565887650508718, 21407122487757773312733376952626316216628330683905159910122619191305250537651, 157252898580012441844510532357548576072847784483988654228119714920964161540, 219416873963777270882660375444488109734525576563827612903536788998465793993, 21371787595413627180649517941533775844730683329243424198224942945893884559388, 21437160020157431621225638786832639269381421126105348093148465760808523411252, 554791088752057085206811108615865335091020820847149332673424207379078524795, 56542238443530181087990626603246316151923418550936693168929100171328618607];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 5968;
// message
bytes memory message  = "We are ZKNox, you already know!!"; 
bytes memory salt = "\x5a\x54\x83\x5f\x8b\x04\xd4\xc0\xb2\x96\x67\xba\xeb\x0c\x32\x58\x80\x9e\xe6\x98\xdb\xc0\x35\x36\xa1\xc9\x36\xc8\x11\xf6\xe6\xf6\x92\x10\xf5\x63\x20\x80\x06\x49"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
function testVector4() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [268561751424889969542890327137592230658201287897935250076451149508292587440, 21684518721947506849789300265391631429719917551767232106737084184873794350566, 238853777391412392484731436393715587414735735186494034429086093083808039025, 21522290262529428993950876603932393241676163172190214993870015982342116016271, 153715748641255539554858449253948927749031813145868218786453447816308272936, 438505020371946495570398091974437352256560074338337004462061815671915151392, 40967121809635654652948036126662105157979884353488019045564199537338560303, 21562925259675987640978410446786997753835954142938567903356028017385854337033, 21518430676544326519187047927840170029829793972685131499818126340569101512674, 21571766774195688294513649458220486897250551858902493948242312212908957696510, 21375317056832379783168757415305264874290783873042126052357659492120841289756, 668197101852099871853794464629564758466160126888050759474659371597741567900, 83372448840795269817972009918156227424829921559950366138525794137065455701, 406704733931768693737058994351414845424578609655549706563566041586785464185, 21378854148000371505047583732581697067122290547972332412224602122116779814872, 134608754125339114865595831803043893477771730821521625217826084924082564950, 95734393261365127530000852925256113637061425013978511832621266703680483224, 257959887245821980432829003305007637132034660595050926252336905641972805530, 21520199540619301235507144426783356056405674169340757054424672922171610759215, 21545263610012698933041571239255666831152616354737951982416526710185547935483, 21596500130687954420145142655918742552411690846702455718611789192794250358592, 21590879548093437015026684849489503523013584038264453942301962550246903120156, 44493460767485280189695841733415183949874708815981914874384900856361582779, 74210736047147036859169917355511067167912599398505530271668783457449160493, 245595386594393720255100524430339544545427447234362401132145582661047812339, 21347051763512339494847866286954496469517202176153754380637700061686971576141, 341002620786943978404534789098413988806709076074043297941229080375715770302, 21292275190845612767485049092816137325363470503145145987548552884475050328186, 680240703167710285213674774480043142857959349728841440541482551166593139078, 275628977866318112440117638447835495336777979591693173248677998491702734541, 21695442456100612336590792643338347627272937252333571692273610279620395139216, 887285549790340972099859120290532020682133982417123317310046368320326009018];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21412424242127082749610191839594829392609335319990662478876364133294951759985, 938197166425361380710370353796599425511229962339559620164675044002097409939, 21647411321071212380761415897307069808958400586121678825154806791311314649193, 21462219969556675763555611051663129394279025351199249323826899476414370939245, 21532570112142586367213716456156282998882970169651536503256279162900785278707, 21601473486094596278097689415768313475766014769988104499793352491966770261860, 150193458487198855960172412486860950466445743917494382397285067450316226641, 63936079761480428901679655785343220182344262444313383981477033448091168724, 21391218793246810542894263058024234198425450067853564400670791803242390892366, 21494022974037990514034492875641587719272379241657474320245997058192701194336, 226157044397558708313848400855036171451956097324768575903477268262834876262, 21566138777573877099557493308809750273628886950442867571793324261757020483552, 773883953089600364097561083085227543243017227910536201641816112224598491361, 21557304056970610111204775034836942486808579572748898192758264058277730004744, 21223371934745051167914669435621300396040813795764848505121538289868127272995, 21557301285044470254816923161326995105145083344818767855254692732795701833612, 358670471364258104760714939225456754161095942466404070493513978650688159835, 328210437288473321774710936334930011045884507386554434481927591059194021, 21157996108003185944232451222500907214109530742953072012336327589114699513996, 21355880957270181049275784779783162902793112397695029577916382944137202905051, 408143289567265176959499044317175596826929427503599671510878281598475436203, 21168594930748873226772498811875707934017541796377192364540189468144969646241, 19435322766729971344933822343177832892069531222182584839246203044511100500, 150511019766944497768812530943806559859096445227616250146176978210900684798, 44499656755767137370694155539619425792158039142667017406186993499424227698, 21359420528678883772827468699927033449515682905127077855108096608968277110567, 21444223072869933784225684209838546304984593361719441611816857423601015521389, 21592968965942438078516618456421132386728252108832191235632804038799762784572, 127214067098599146044102912383538310785919339012842875166013412905288794426, 201747729362989241789380364419493806857510840486777789744138313435815936003, 521222342516545346869170296352098282898180697487366395837698420813812150132, 21384480877498030869454209405815772458304077720102573529957815727485943754618];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 5753;
// message
bytes memory message  = "Practical security on the chain."; 
bytes memory salt = "\xc3\xff\x24\xbc\x6b\x6d\x7a\x3d\x30\x7c\xe7\xb1\x73\x1e\x7d\xf5\x96\x90\xd0\x53\x0d\x7f\x2f\x5b\xb9\xed\x37\xd1\x80\x16\x9a\x6c\x1b\xb0\x22\x25\x2a\xb8\xcc\x68"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
}
