
// code generated using pythonref/generate_epervier_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_ethepervier.sol";
import "../src/ZKNOX_falcon_utils.sol";

contract ZKNOX_epervierTest is Test {
    ZKNOX_ethepervier epervier;

    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[512] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035];
    
    // forgefmt: disable-next-line
    uint256[512] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240];

    //stateful initialisation
    function setUp() public {
        epervier = new ZKNOX_ethepervier();
    }function testVector0() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [106332321252431061900770197746053161924634397399066259100519527753372413930, 21665084127319497823573964485865624210402348336269939779290534206553170915271, 107783418427803944083711757740007975733454664147862905401285656395597021232, 21157999051633612764047052024367082453288868796724629908749482463919527559191, 21460445730498321296758650187785712609740405917358283236735942888711919370341, 21695442784639248202067987057132156674576950751661055619376193791507707330673, 431439249686108901999173870563967387765918068601714167802880449873167515708, 21253729454712957555392887250260918599374653224600415933345160332166353190972, 21645649973862629187144755771778407256116903259207800145067326992750751973434, 436738415892721875870787068712603318200561346347197590626233455213986709530, 21170362532697841867972897119347421935686342235288511273363760062611789590357, 21497558717206517326421765710438119253163691820939702151682982387999707037851, 413444644589408713156749337038536734913663682394868453449653260570137473023, 21658335863930158804256554850646163274139957853998118560929786081487352758427, 21610306907627626873809469294425226791330551158046738147356659641083589296458, 28597709581745982681650787759454816040269785842802007457341991944595439689, 21253407440154603151413754333647673453764805866904824070953792991361132605214, 21707813113465420744110437404874842242057147647697249146014402144737442738173, 21539962022302635427221943561068336094317854546337546310973426905300574744456, 21656567641892058356701792843477638195121454513804122421818890701010612846767, 85135872017927565611128355304031061187273463539752068789135999924640940279, 21564373040696132277285322030559799504878392459430673353037023428171020381943, 61843884956522272173729932213556801110572733573973922739957031093672750936, 21442464125004531752573300047999214487342953901882461644379307209946823863981, 21711016732042862910017987187512673290633338118461014077620428564823655329758, 21219834919583327718352057873329751137047457506334869401518080109455360602109, 267123761733610139158315711943504875122060583449066446101680202694284935333, 192595959798282183619464429564269861443421533391826535959503900456479097169, 371037888581112837394568623300172569891563075895662855653472326210036105462, 21403916092372394078550740988780155479463181872458414582279797742059587841887, 304220405757790627933116923084388089737288029621920510523685328162000744228, 21703952664851294038643741355221736432188458036586317794038009586364552904977];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [226161519869725251356344408907678892390104083586443563386125715426949738413, 21562601821269046643200858246202301062882075022429333461940742114375696384039, 90110472414887206477556374273677958001997210199677829434480895130167869638, 21654478003405504511793214880183423382929023752422285237729687373819110359084, 124010583294412487840928470639623851466514210374141790445951906817056047265, 21265773698128382376022414973503284259154426469208937332107898559103680786159, 21152693329132454665465594805050489554057022987498904220914967648446535106661, 267122872098078746204314427438418999544365432680553123824944190772157612036, 21682749335929743170997895048871458212437570849625560537002514737635745595434, 21484861795441278719515884781875615016373675264589641157843053661627825926024, 21494022030535633365205167718007907277461970816212877879540051900491462618919, 84810874808887099016503540234665696039790220957637403019349383349827678057, 350166225851747430063282192816376389746770807469089243428549425128277475466, 650199881649548118992129068296237894454679779678092241702610418170527744121, 21488719656068291800611809833048050573318660200348545716103717126286509420403, 314829877589026152452887293853354466667021155167076575997137597709859106809, 35345487657487992676444089392285082869581089981817556183765262333748457234, 21614166714262062022744724588614947811478116106019858299625278902489629994820, 152273369432049113794598368263972752042931312526597870853463921178997960704, 21084111354649684158712973468179417192282084173425140862405837349011434766486, 21670384457790930114458052024912458205631480789721490499424656469597800837116, 379872172932402056331205938589211266183595970379019632768796329750222536804, 245593521367258131080917704623762266216657855821763979281880033371241918282, 21283440200703761945357331956834716141942358303792526371596883332396933251127, 189052986446048398455180269543195197282143096421268665349796348614205046933, 21504626235299717977365561039066129148841879524220507149017609506261092008069, 434973774590266779008708861354942402923329948686241231971615661507036065573, 21375639956089752449127111071353048175707725148465526277052153320707821547382, 21594734092587436036182371931355996474990889855110505875435994529156361957075, 21329707868621957044425685110229835681048781346542006194666559814521442598942, 226161492811046565732054082664382647078339185537063904212969076231405449060, 21541400788752694945415155366788038951273885644370092786472578455575017947183];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 6117;
// message
bytes memory message  = "My name is Renaud from ZKNOX!!!!"; 
bytes memory salt = "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
function testVector1() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [219412722099826891506513754547358184974465331634786039507696047446342905772, 21486952647242934251093714283772423407763818396433756740603808818674216677231, 21530802213676837407785972879850928145055837019563733115758465597319519022996, 21700425521987131839111958406349721155430281131472967440953628916093088837544, 21695119723613892220721187151508444372005450481229202182344813444115449643071, 21343514893043045665481695616640520987711531741107262544987655870500339843241, 258290928341754941126236536594312015382113078907153890917542229673643945934, 10601815302573749134661481755030873267648505712889653649519327809595637918, 469984931992665202622480228721123302214304006713164844009026841498415476634, 102481286635771739907358048542987677932100853337483881276977504814566682200, 75974967955961539314245780315403832815407680299102916178634091426277306319, 21635371602006768765141550379203833255278279691303010899925411781097289428710, 146652166592075092524985022131423516300186170001833713062205462947513315192, 21375316113240005749075297027547783059112956181009537540980220315976705257383, 21688047967698614591970456401172274401455332837981558307366072238569715466272, 236764467344352925534825860713480848460267169630702263544976216203056120046, 79836414234001691063791434936730856043530363982392154028400772686473670624, 274191958929756628798067082898085362179328834409275093291521279896933105714, 127215986191326479580699628338988713430681905593353841721662479814977073012, 21412424085359863460632402081624537599449479171886086006431355999176386412599, 424369003707203720276842245656308420752823625456630678226791487877269618755, 21204261991707111603358684514607977149916328455739268322296086732541317546215, 21435390616827164616538323834839000999361463567951889492455834751641330843784, 21585894411356786076562310572962145022339459240208153887004524620911445344383, 21286978806499049167457869229245888665065530904983721243907710907893927379049, 217327554144401183010361722747642750610229268059677725413028156354909581117, 21520527454449378939609185938197233166937987521377262257973907088961672249445, 21417722793272815448559683216129802133861691655366709043314989818863737110646, 21237832252583494418886314601150832173027082053221822164703268817675460161131, 196120913947701753299946457995926123541468256942717211167571759406797696862, 528616269627066114241577545653791480137818116413182322044913900954484617161, 680565332878738094358019091411410936832997695793466151015060800074175819427];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21440694042833289054859749855694575694399621679942126537696744239308540805321, 380200900527087903224326724114275961802418842162457382299704292326755336222, 298604168569747447516733362087161829566044948540276643909788447361623338909, 194682492951912314693936458046240808985167958933488963667924374198713843858, 53333190986936866872301118356711987429531265623693865114053462381691076890, 21441019422412824187463657900747788250411949004068482317825613727957247983814, 21172132129626245519190349073435496550902555201401793361299060516640524796081, 333939734885897141171231244964845202404239102234610483484146716496451809124, 148743256082415044703838220904079284456280494946499960355112737790802198537, 162876824323589057350010366868496274400038523676927971665920610436916457310, 21451293071377217977316988980937099503153122394212697845104989626071434211280, 60073802629518875194566799997892701371571355504662768542337694242739388584, 21388010959045333654550249268920461317681766077421315061886640197954976219450, 288324578620911196781992098930610641995732878587436407235475269071879733287, 21624770865170015391876548096284746821433659423404993579108651609466470739847, 58306578203648892272463127352705348073784711790997981069480417999607508939, 137820735197328524800939211298585477679560587151345402233591435376942252307, 247365172290068348432716319199145743732214791451021337050436911314485051427, 21057610584909899338065540361217526751281977004016132608798516133638000947163, 155482676504345252004369030790819473805218553674896374888958720571501391756, 111316110067854030918836710239341002535279091677401712973197139845583798423, 404938372003769851816973325931699341456053884478709294219490316357240356970, 20985172092853042635462029670362048401755759749768614600379340417613265383364, 21490491270041219678796121148298539063021861672024087358751344245065408131010, 355466982669220941517977638158671888775201034001279981236619754206084989074, 754445103599676955486608285659921917080202576378706706417948238863790124929, 21018743750755391149513108066216528958425557242107859084336124450923199397948, 21306412852124692893774122701145280233741093988114863084817413412677005356980, 21426562177800554428094035469743241800361702627276691628387212884742254231905, 37105950209012782067595235163411218879343734453960612925073790644968304296, 42735564491052485928947290223186483191102936563227320476086824772570579260, 74215373138564650405080100096684004533669528950729722287741826395134308344];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 10785;
// message
bytes memory message  = "My name is Simon also from ZKNOX"; 
bytes memory salt = "\x34\x9e\xc7\x55\x46\xf5\x8f\xb7\xc2\x77\x5c\x38\x46\x2c\x50\x10\xd8\x46\xc1\x85\xc1\x51\x11\xe5\x95\x52\x2a\x6b\xcd\x16\xcf\x86\xf3\xd1\x22\x10\x9e\x3b\x1f\xdd"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
function testVector2() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [429344677466937235525681145943466745565023208177815391724699838072159547375, 21589431200895153914018020703262994350529908228207218686034336672421112590276, 21036083849267167557927598486272956260064935229016191225131896405295772217063, 452643620278352517257642338525841630627809108375170646431545867054507568716, 21691909602648638399921389586721183066369036547579511594520909795435217944904, 307761972220981144635529630996683720050118525527377425243109575445824995333, 493281538948806499183593503935986458922845263409932314860285767368090255547, 21688049585381878985709084649956908244857367749433959271505973436240154788265, 118707669688122814707185827495883888221588624988850570293444857430888165304, 21442785137183701714712664045509859657263711928279013282931951187552108162870, 21481653475985931820342805971628580364688570983924378621683028137655831375795, 274190368168594053843525896043569160454904283915510681000021965807388143357, 129300632164321991144439426834228059968702699276468078261875085131014340671, 116937070213929044693436588477326897273011274162059436154213645356694437991, 21239271024059338451101633665507901362193866417973164596991419568817045843942, 231462195798308704814518187378758854446979039818953747406284377703271116709, 21251967644203666185114240540331585694672898041894650274419866838335188512714, 15906858782981567961431254595412529790361580340183427596078632483512057901, 266795928827725327486880113189395546489387027996287370270136098712461389656, 585157392704261294038701542694404974138520541747046103849884738017780772819, 21380619485213108546608498745933411006822488893931932638896562619911814590357, 28269930524662217813237009949542085090713769387311769721820473582256140081, 21601479843714546597521026014672294245248686635343724229246311534564111417563, 21352676147526390688867974500967113072528710161377813827287492757195321835590, 475283612850791716354751432617607572477821738626143881151614303337899229310, 595437467999603113636425027866146087868678080906991983690945391398687277395, 507086563458958621264495130686354310465226087119147640343558095125558657100, 76304822868390424282940117906917261172937007241957665267997179463312814034, 21442777259884346602476199321206505839438806895590299499601058519877659078547, 378106808589072739381307102934510391180279815693940806953590131852217090131, 21631839790070808730226528519935663111466588185396488853514865310398690635743, 265028326840835302356905379284044845961847468944081297367657662126882488571];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [493280406753971226929976031993596850342161111769088657759474092498387414877, 21666847954886217826123635476511534057550082275486231742862337843079420653162, 109875779881237343610361203519621467418377214301497312083217702145854013523, 503559501491091908149810671762781556617803573964815629679220676117999923159, 21372111923563394378968013641991361339397762109386277117902664433219650846741, 21532990295645934290355831564872678296456029412764353701557850661383307363, 173480980185259649575791620110178636369669309822598196803120717449233236414, 21412746683156612101084891765314968827983432013471749676878020185680898490515, 21681310030121135439859814426876165480980070959966453727048157072466602897379, 21396840233685148646671379850245383285037514069299062225680501622844160213001, 128981161704031251784854793261393600224759350926019698641624147363672162307, 21635365697805263602901298789127025939929303985502366564601768330372593615124, 312738859209578709605724524224454848234140239569960557701171734594972549271, 21527594600191975262698759859594253387465486455064772181657836103769186238538, 173481676116780376299789997749090946611467760971006314728840295483060465416, 21624764960904261920358943142936811072411684308237944131517399197477191430079, 120149698320114996100748073311329857140638466475824628357142275607443865786, 302132223079224950606872447307549491354751163962023601416055057784134303755, 381964431493257372594453185920670056274137042058408520083182815574448418670, 21647415958186899378726232571498739302820178667564698188390356859748065083615, 307432899161402662052853686553080133384893846062126131313747474270394658713, 21456917374440337909509543177157961359147775450053932760273264921545288974433, 21612403933228759860909192837402577646806726181419202755100193969794221801520, 180226407742409648039194863413372872826179697811580321953470262234429718547, 77741922930460102806599114199758228650232041145483256643448691507614461862, 118702299723870137795351332442449242690861802196273737549076621668856627343, 21704275671956344989475420798210146558259612448899703590043993885858480402339, 21379175564391155362138871081486477216288599520801141537497762534844440325998, 240617070675219561230587748069191713484516510548261799689441157787275636724, 21515221332528319111888890973818457537968587277578981988393795080115304738737, 134285661108981050049243599585195266262653999130588572481093224346941665227, 21235741454771514403806989755440143813739340546610785310564869342396846702713];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 11071;
// message
bytes memory message  = "My name is Nicolas from ZKNOXtoo"; 
bytes memory salt = "\xaa\xae\x31\x4e\xd9\x08\x3d\xab\x4b\x09\x9f\x8e\x30\x0f\x01\xb8\x65\x0f\x1f\x4b\x1d\x8f\xcf\x3f\x3c\xb5\x3f\xb8\xe9\xeb\x2e\xa2\x03\xbd\xc9\x70\xf5\x0a\xe5\x54"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
function testVector3() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [21458363807550695839442621353492909992323921475694450084353204193287002587315, 21418051219397003903607450695117691200467694030102794383650129660852005961954, 190820863007925819673565277853268955761791521030858941176030439411376926401, 21120890599243217460092198386283638263064661734121215252957350239042636611808, 20861493450352541643356655193752638103984238726519720750387101832682780754154, 466777404155491498080039686510040492013009965906962243864421871425780527044, 21666845776095848705109118796636193886816985760592256121635712136278404038801, 330725672890666395183053919696412518436326528456926538720281410452293169075, 21524058511501561174577731919690726825582966230276977630205625265351355138253, 169945776286684080066511391891903710293794826356454492511428267439312601635, 116942467172686633398251300370771078929729298123223361213699832049672782180, 235318389781789718275460715179341155428680250450076708127025235922828198073, 325426835158924565479278829994702404617561008496935447252188505552658825368, 608123897241384898957057112402664921716447274518118717611598978011708010366, 418744506783567760273563287971329968020183395951341963034718692916987506662, 353370113917170122166162647826699183614321200059401422064419442652234919806, 21168922974473436435520481574818860443025948933172635815848306098330409435284, 21384475571354670714620786025313749912221440013515264058680829358627726503610, 288326115315657000739948169609683334161409209447644793211190331012126736511, 21686281255450512120048492597962219090443846309246420520667106330507584602588, 21665083431329486166439565907723537296896912265977574463359410990635334762595, 21481654419630885998273176408825222900007944229033906082272033808535486869379, 21691907791459460841971904982007357008007634876719743147900843863598568779711, 12695438962900020697619330315024391694545147597816747729900320351497879625, 21531124093402622542521666356140708894857746390507218017955070998320689655563, 970330003859024510199359976705431514269367900607909612265815573276558098544, 21481654936754141964436740634691932829089664053860976146235750000770448699303, 21453062075190832658058502541562761306608541603401260659894191642234741469101, 21260471706020613183499389918185717838949235713870721345759044179741906841434, 48031517480525163504406182013865833453798626945414494485602003919269539762, 21555862832104652996765702065285387333313341050851957626435517043404998181006, 21513459639852788251299344377608116805292007666992549948785872815289029886195];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [139582621619091973268406996862193698115430301984363595111361129735251963899, 21359742079961959807246726389930794441432293621268971096702536863089608764897, 118382959146546848231745772948852012638307191547927788022832285183894683649, 21536429945741829194822207571539258431069200017173625118392011897849553813622, 148423138579366956058453933217336125587539449861596574326165704499660849193, 21619143331751904588194814768420168152638632467051251418057648644844238024339, 21645973353437921644598641509099719846654215498799873410113902759399807451437, 257963203219708243300732811536722559054030349973301976653200023614616043653, 21536427061002106763298038443874169158917156624102982844590286126131717025734, 12694850722174439642871122874065057800644133054382397703390981767837790160, 777739737687178910580575551457083463876653934529989863387426992066039382088, 21516990125743754299336899012536203041248035844446387530000323264495367368624, 21490489954013236486107894822534818339565076439147260912588686182594426372354, 21437157922294133544212697991292265820771775754117682697931345064139374919808, 21509925266720509611414156962916589529068416782368373787089922554073875415192, 367830868117506652633718625851683829130321499160650676289409389877241786089, 88669889658952898442752642697476954446308354278215588371055551702317006901, 21574969755702614248520897941792480583348257926307134288187280486423275450109, 364299654275891111018512487940808841527579578145268499558750714322582777847, 21117363779808737333135289914774515051669156612888828075917860361460817985629, 203193963733906824598952038210561425452150206885692922469059683148180553769, 22972009389482636634192497037003523577501302464521224368742855070055792667, 21649182993950735668923104947618807833401398513458441748866431515688969830420, 273869005635995711530442580526213641543117021453352834677107989337277476771, 21677447370707124799045982324476925159788884325794191928617242127358022516783, 174921579915319636888007064211193098113178630414544151415314009163722719431, 102482440912378770604665655586245637409462049468160924345149628581252104245, 21574971314407553792678838266568751305931535667092054255730356374069653745649, 21361187133146925391703267663708276721497143620377962792430426707450819718851, 21536100975503995417294567412470637023431286155732131299406027168369673777075, 249454136766025531236971116086006518621283092784519519001855085335783157682, 65703358185893269824880694394039966480551855883551664435156905045093396462];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 9247;
// message
bytes memory message  = "We are ZKNox, you already know!!"; 
bytes memory salt = "\xf9\xa6\x6d\x13\x68\xb2\x08\xe2\x1f\x7c\x10\xd0\x4a\x3d\xbd\x4e\x36\x06\x33\xe5\xdb\x4b\x60\x26\x01\xc1\x4c\xea\x73\x7d\xb3\xdc\xf7\x22\x63\x2c\xc7\x78\x51\xcb"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
function testVector4() public view {
// public key
// forgefmt: disable-next-line
address pk = address(728199263750570446964354330903202655824594974439);

// signature s1
// forgefmt: disable-next-line
uint256[32] memory tmp_s1 = [21695115167320452829484789821252597010645937871822608529698126739461961363372, 21421257053573591163904133333571386942219684141578392837038110413995669454887, 123683909602546187547200308047482503539674839203259403828974626153024127056, 145208672232658535282129630872055543521483050832709078647285294417704452106, 21665078713357742428714638385738275669985746309675570323735009874447957557404, 71003904322912955393518317319037281539402461602173502274156574333534285776, 307756504229905853975198079011614187747876523696745724740358591001455374162, 21553769720640116533714768510007470547830348280647748855724333758967808733138, 21605333983757100427418912026092849275604161877579671651039789573818640564581, 21157997941330646915298171549136884425878607573234459751301451464212988112832, 21610306535165613142176582004117477682340918123508133099416476691978286280612, 300374089079218146853773252305771548808497188389470053891538482633692545108, 3535559338181115760025292554863328085270373292686721737060575071892209744, 51243040364316288739929646538808893723140242694874668396920460914758528931, 272101543440962235128391662494353662326532902271523428954603302799727538084, 182313188484413334692265934724673740159075595428937823751260570083818417885, 238527157584471963879326225264987359156589897017150132220584462514170232876, 537126279675180990264863001731113308734013198171352412833790978796818465015, 300366567203422875375938840573525383354370627719337147973829141288362836049, 58309592770876489421063335724916851422475705063141452185838386829428535288, 21582365947447010241342043325705335055989311493862891931154712763415876730981, 132516468553449802830877935958312250263028813671033863740449707804399906673, 102477269600351534476546077533346397006573398581997696169398339087729504176, 542751202900917313958730415005527005330689373761003020974480423875378610202, 614864778573449289107973493575328770455530592503266822476965616322866130812, 364298651832121766323244707845846318388043688949946281327612607703984451486, 167852579060094137720511792265684296970115826322543790464286699383417024272, 21392992456178229002749417949462542125191626475289741437099407105650963394531, 473522081909283923230788536118738308754036782953776622930979347883126763480, 21543171199526596643460055435576878946644218180235282550553427553067839652033, 102807227392757697993364814007622764481554254071639814418123181075478884212, 21659783127791669313574454330974287429264233661411646091076330637244116303977];
uint256[] memory cs1 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs1[i] = tmp_s1[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21144185475908384251291848127658451840118668397120687346685347800276108181618, 178454524157596204083198831737579244400720412848618379921769757194428219458, 86578471827589046202171357245160750480897959197291238936653154487434030789, 784480743821377177934339092951575843300033553278216791444403021043486961575, 353699434701364706443627805959334892166508764041347923784496399286200041538, 72451869138847781661426646120114564018595725986978280352449638557032579498, 21435393038376763921101062668192245393782476009562964970873611640580267519800, 705986116237663506800642617894538221512608370891034550795081818517362, 65376285084408461502234689381573972459125513396366082569016217541041663584, 21679541053220905904510927288790386269175132850042252274547753174760158670843, 21324400663297068481399047979935312225696838775103987934813424263511810834699, 289763376971620586415263245947844816210046230546701258788327344957764939717, 40967283582068681957600723598741436509851332224180615120829315268242768168, 21461893295895327037059181441182965013902520383783813647355113579862887247793, 21325848039999466570360550438977118240390570864280934984247172328693515354234, 21294043552704368897087468350576426571962272752582902692954825892179403079794, 21677450012801568230193684183601572885002230860212020797824047436198366949365, 21638907129448153283707022089913338473147322115786649879543261589555176746777, 196122100186924282937302047441332183757025956565304475294897769263487856406, 392569234357523206882608241763500232207840004647588738054276481672500686712, 252668027134643210375492535292333694292614581387624982648349668379704819991, 21544941470533809535997047481859823358278023483462962355682885339669404069871, 21191892152908081918989650988263359404184056429060781812756326363070358368229, 21423024542688818504918374823577453817908203518144309997034914444964200120362, 21391541288105394766038619046271188994221001023418561644664913323972632838222, 21442460107973636616796391997122174347769757548224653885574465252287531200421, 21191894121096905079400801662571023638728816084051531488502262713233335451705, 611658535085829530731475531678956174590070939351233092540783592313493270321, 21654807243255145882064710151321498018289106530071115115589225714940500181133, 236758832697884990590162108098319256018384768742313014172961613048701059086, 17679232676729902387956827993227407334162514609488906570077505897914248999, 21617380151202513115664190491258036018727194956731358697115782406707217760395];
uint256[] memory cs2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	cs2[i] = tmp_s2[i];
}
// hint
uint256 hint = 3915;
// message
bytes memory message  = "Practical security on the chain."; 
bytes memory salt = "\x14\x30\x45\xd7\x91\xcc\x85\xef\xf5\xb2\x19\x32\xf2\x38\x61\xbc\xf2\x3a\x52\xb5\xda\x67\xea\xf7\xba\xae\x0f\x5f\xb1\x36\x9d\xb7\x8f\x3a\xc4\x5f\x8c\x4a\xc5\x67"; 
address recovered_pk;
recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
assertEq(pk, recovered_pk);
}
}
