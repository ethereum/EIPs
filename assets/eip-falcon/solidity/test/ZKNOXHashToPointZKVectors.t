
    // code generated using pythonref/generate_hashtopoint_test_vectors.py.
    pragma solidity ^0.8.25;

    import {Test, console} from "forge-std/Test.sol";
    import "../src/ZKNOX_HashToPoint.sol";
contract HashToPointZKTest is Test {
	function testVector0() public pure {
		bytes memory salt = "\xf2\x3a\x52\xb5\xda\x67\xea\xf7\xba\xae\x0f\x5f\xb1\x36\x9d\xb7\x8f\x3a\xc4\x5f\x8c\x4a\xc5\x67\x1d\x85\x73\x5c\xdd\xdb\x09\xd2\xb1\xe3\x4a\x1f\xc0\x66\xff\x4a"; 
		bytes memory message = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x52\x65\x6e\x61\x75\x64\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x21\x21\x21\x21";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(1952), 6176,673,3128,6784,7239,9178,1821,8025,4491,8781,10767,6767,1868,2315,115,1022,2106,9533,1695,9904,9668,2971,11612,4095,5690,3922,10628,2548,10609,8060,4774,3839,8828,11005,424,9730,7803,2043,5714,3235,1150,9318,11684,3374,9353,8584,7793,9633,924,9619,8865,7550,4852,9279,10808,1517,7107,5199,11307,9715,8625,4999,5787,11201,4258,2057,5048,11198,9591,7947,5151,4123,10725,11587,5909,4510,11918,10202,9525,9345,10443,7938,7678,6645,1163,595,5360,2033,439,4111,8827,10086,7835,6645,8330,5315,9653,1039,693,9507,2925,2308,7060,12004,8691,1780,6649,10768,8909,10919,4916,6987,4235,11143,4127,3995,6793,7627,12253,858,5115,9104,8798,6530,6880,5337,9294,9206,8537,3096,8696,4409,9580,670,5563,10734,9728,2196,11068,296,1581,6955,10604,7150,12054,11458,11414,4833,7545,11756,7363,5845,8006,7096,882,3375,7053,7349,9567,2071,6159,8372,7535,9986,8911,7771,8260,6811,4040,14,10745,11698,3603,3507,7286,7956,5791,9248,11183,362,5,7361,1305,1739,8007,2600,634,2790,6394,6322,12037,7167,8166,7898,5118,8376,8495,3479,3594,1992,2904,5278,7246,4707,3754,7270,4035,1264,8414,1053,4860,6778,4031,9672,2108,3396,4397,10978,6244,3730,7647,8219,6695,3361,3258,8893,2190,9245,6037,5344,5070,11769,6057,10406,898,3014,11663,3076,7560,6105,202,7521,1933,1157,3160,6802,7393,9420,875,1821,12017,440,6563,2035,2442,11976,11750,6545,210,6078,11987,8960,4161,811,668,7159,2956,10542,12285,4228,5805,3593,2048,8804,2538,10196,7075,12264,6886,10495,10943,10127,6572,5914,9607,3047,3972,7904,4776,6917,667,4786,1995,8888,4336,989,6539,10784,1876,11385,7176,10139,6208,2159,6474,5822,6722,9310,6726,11626,4247,8383,11743,10643,3265,3021,8087,1005,11421,4276,8737,8536,1903,61,7838,1431,1320,5651,10782,4618,10730,5885,6395,4496,1326,4483,9505,10508,8546,31,2757,7879,4105,3593,5980,688,1306,4534,9327,10010,4366,2752,5919,4971,1278,3190,1843,11826,8590,12216,1148,3831,8322,4751,12119,574,377,4509,8653,1819,5399,10815,11219,4496,8199,6457,3257,8708,9828,1680,5170,9220,1172,9736,1633,138,5170,6218,709,12163,9909,5311,5377,1054,7576,7030,11422,8410,11908,7233,6019,141,5085,5241,1200,575,3140,7743,2124,4697,1894,6204,10866,467,3538,8002,7576,9869,2011,8043,11429,9713,12275,4843,7691,10405,2530,3767,894,9263,1068,4608,10276,7785,2271,8623,2608,1912,8489,6432,3559,3514,7999,9370,3446,1592,10061,11289,1922,1795,6224,7959,260,12185,7069,4338,5814,2063,2419,3304,4964,10975,5619,1905,4403,11803,10888,6294,4635,8119,3552,11557,11706,4877,506,8190,5674,701,8399,11894,3648,1341,3579,3302,8161,441,2650,10894,2537,12223,5837,8309,9492,1083,10514,9564,11806,1896,7873,3905,3904,3738,8531,5815,9794,3320,10348,4673,7509,9376,10396];
		uint256[] memory hash = hashToPointZK(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector1() public pure {
		bytes memory salt = "\x16\x2c\xb2\x63\xd6\x54\x12\x74\xae\x2f\xcc\x86\x5f\x61\x8a\xbe\x27\xc1\x24\xcd\x8b\x07\x4c\xcd\x51\x63\x01\xb9\x18\x75\x82\x4d\x09\x95\x8f\x34\x1e\xf2\x74\xbd"; 
		bytes memory message = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x53\x69\x6d\x6f\x6e\x20\x61\x6c\x73\x6f\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(1178), 4740,10573,10215,3440,8512,9459,3373,10480,7836,7353,12234,8572,6737,5896,3439,7518,12203,11491,551,5238,7308,5229,11267,7648,8236,8450,10288,2233,1781,6823,5001,4972,5795,5171,7973,11795,4178,2094,9986,2032,7310,11232,8822,9027,4296,11636,10420,10686,3434,806,8139,9969,3736,1001,8268,11833,5173,1166,8628,630,5186,11898,2491,10525,6577,9706,9258,3062,4114,11929,5052,5670,8217,11461,9279,8675,1694,11153,11538,3561,10459,2630,10027,3976,6792,11545,1808,1647,6967,4772,1350,4272,10700,10767,1745,9687,3088,3518,11231,8729,401,8750,2605,1176,645,5783,11901,3644,2995,2882,9545,4958,3072,5704,2550,9561,543,5474,2724,10575,430,6401,8598,10272,1899,2885,66,9913,9414,5467,1800,3373,7128,3692,4558,11669,742,1582,10105,8420,11007,6866,2611,9520,5446,3166,546,2322,159,7207,10539,3934,5696,5464,1838,8776,1568,12235,11861,2791,810,1427,1060,9993,8216,3231,9187,400,3059,11320,9075,7430,10795,797,10644,6122,6990,3835,5834,6497,4175,402,1249,9821,12198,6823,3956,1066,5139,1476,2515,3048,8621,10333,843,10473,9272,4343,1755,3503,1901,1286,11229,3172,3703,10963,6306,1170,5388,2363,6929,8046,7724,5377,4853,11212,8584,10473,1621,1817,3862,3752,2803,120,4585,4894,6773,8319,5405,10307,35,5341,5389,9842,3592,5821,2463,4596,9363,5229,6922,2961,38,7584,6941,625,6714,7412,6897,5074,8636,3685,6930,7622,11820,5515,6257,11274,10308,3446,8340,9630,11640,5076,989,8437,12130,6361,7154,2920,992,10790,7572,10151,12179,7517,1458,952,11363,8605,5962,6518,11760,7976,7181,3402,6562,6020,5752,8255,11376,4959,4600,3061,9510,9455,266,590,1170,9660,3254,2882,2476,2882,8482,4556,8007,2369,8862,8449,2765,9239,37,11593,4249,10091,9246,1849,8781,11432,4680,10172,6201,11411,4689,4508,6589,3432,7955,7837,1640,3230,4504,7689,373,5262,1144,6929,559,11009,7001,3041,10414,2748,9905,11764,11378,5570,12265,11891,10879,6072,4131,1782,10855,7225,4498,11942,10427,10174,9592,9038,1570,9370,8494,9817,10810,8091,1082,461,8109,5090,1841,469,1072,9778,1468,491,8876,9730,95,116,9903,1106,3924,11815,11429,6256,7320,1787,2742,11702,11726,7406,666,7179,4246,9341,6987,76,10098,1023,8451,7820,7385,9301,9641,9954,7392,5321,4832,8362,3771,10155,3956,900,3834,5710,4139,7405,10601,7279,4555,7972,8545,4940,10195,11178,12123,2272,1242,2949,11957,6489,6050,8709,615,6697,1969,5031,7982,7604,453,901,7847,7503,945,8417,5695,2423,9876,5071,8837,7062,8775,9047,11385,8877,12260,1478,11026,829,2084,3831,10381,904,12023,7847,188,5230,7399,9480,6824,7119,11753,4572,8335,937,3491,2546,10003,6651,2204,8872,5739,4881,4212,11666,11566,9512,10732,5991,4621,687,3745,4282,3453,4954,3719,1601,5747,4895,3687,1104,6787,6160,6291,3329,4034,5160,1661];
		uint256[] memory hash = hashToPointZK(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector2() public pure {
		bytes memory salt = "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44"; 
		bytes memory message = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x4e\x69\x63\x6f\x6c\x61\x73\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x74\x6f\x6f";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(7619), 2245,3997,380,364,3674,7375,6387,8079,2016,8983,4458,8795,6259,989,8377,1840,8579,9453,3442,6701,3748,2946,9407,8167,11424,5374,2760,92,4724,8055,10287,11148,1828,9124,11635,11303,2680,2528,7339,6192,6379,9899,8187,5846,4178,2155,539,7552,6807,8675,7122,4288,10569,8997,1147,4223,8711,5371,4511,6416,2973,9233,7613,4663,7731,5324,244,11271,1313,5395,10147,5,9943,6604,7138,11753,4585,6255,6451,796,127,6545,2942,4676,12268,12089,4358,5750,10020,11485,10398,11878,9408,5495,10673,11592,2149,2626,3419,8778,4832,667,9896,10110,8519,6779,7259,4831,2121,2452,7729,6618,11230,11880,6448,5933,5617,3895,4830,2400,8140,10244,6768,6145,979,7150,6809,9371,11868,1028,4809,11302,10555,7851,2113,2768,8119,6908,1459,10437,4395,5022,8976,7672,7851,9660,5070,10433,11985,1194,11218,6583,4892,5263,3253,10229,8086,1349,12235,7780,2164,7846,6382,6412,759,4148,10746,12197,7592,1317,6068,5693,2875,5142,6510,4873,7421,9518,10511,6594,10953,4100,4225,9636,6258,4333,5517,12121,7652,5447,3519,9963,6099,375,7317,2343,11190,5368,389,8407,2233,4038,6116,10947,11853,1961,3448,3810,9730,11265,5522,11082,4566,604,7268,9474,11205,642,8586,10281,4593,582,611,4662,10055,2242,6860,5956,9739,2187,10306,11509,12115,8552,1648,11108,8892,9810,3217,1554,1365,12170,6197,10485,4918,2772,3344,8348,1516,8355,1627,922,8737,6805,377,7378,11109,2434,268,5123,6947,1936,10170,4266,762,7050,3510,9274,10286,4783,5845,3068,573,10806,6321,8049,9589,7681,10426,1237,12014,7690,9928,11503,6432,10764,915,86,10385,7660,266,10970,7534,1067,11773,5087,11756,10557,667,3180,99,10845,2579,12105,9324,7106,2597,9974,8395,8989,4873,4545,9208,10524,10997,7324,4362,5760,11548,8176,5154,4181,9897,6858,1019,2967,1194,4944,10383,1266,2877,4267,3241,6972,3709,1955,11307,1409,8388,1072,10675,127,10521,6754,1654,9422,4111,10901,2567,5862,9682,3655,7668,1908,10830,10001,9895,3654,11132,5672,7500,7050,9764,5100,7999,5630,5242,7527,6321,7307,1288,2050,2506,4711,6768,10712,2297,9735,10521,1258,8412,6554,2796,2447,11416,934,8808,11273,502,8883,6270,5100,1368,6570,10483,6494,9940,8825,3089,11836,9477,7875,4288,7102,3842,9239,6772,7347,11129,3192,4103,7029,9346,6833,9564,4063,5352,2520,5657,2418,7178,11660,5705,3060,11724,261,8602,6101,4563,1649,1566,7350,10618,12117,8343,6521,324,3068,5675,2822,11540,7984,1273,7847,9191,828,10151,7747,10555,2573,7761,69,6673,1191,3759,3014,365,4019,9135,6351,10110,9291,1840,112,4512,10704,10351,7223,4665,732,9668,11246,4568,1350,951,3826,858,7148,9413,11261,1535,8719,357,4804,174,5446,6933,3023,1619,7061,10326,10545,10852,10305,11576,4242,9929,2134,10463,4117,4006,12163,5908,6481,992,11444,2462,3026,5082,11924,4921];
		uint256[] memory hash = hashToPointZK(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector3() public pure {
		bytes memory salt = "\xec\xb8\x79\xad\xc1\x9d\xe0\xc1\xb8\x58\x7d\xe3\xe7\x3e\x15\xd3\xce\x2d\xb7\xc9\xfa\x7b\x58\xff\xc0\xe8\x72\x51\x77\x3f\xaf\x3e\x8f\x3e\x3c\xf1\xd4\xdf\xa7\x23"; 
		bytes memory message = "\x57\x65\x20\x61\x72\x65\x20\x5a\x4b\x4e\x6f\x78\x2c\x20\x79\x6f\x75\x20\x61\x6c\x72\x65\x61\x64\x79\x20\x6b\x6e\x6f\x77\x21\x21";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(6878), 11135,271,8350,5003,193,1206,6300,5621,7539,1128,10716,60,1415,11617,12283,9801,2985,10175,4521,1423,8023,941,4235,2057,4577,9715,1704,9487,6078,9953,4431,7218,9228,3567,2801,9895,4130,1048,7543,6165,3717,2544,12052,564,626,2376,71,12255,11354,2758,12193,8445,5359,8578,2896,1281,5089,697,8089,7970,8752,9833,11966,2317,2924,439,3584,3110,2540,1609,1865,3419,5922,6143,10000,12200,9038,8316,6742,11822,1476,6111,6454,10146,4904,1719,10736,11037,3687,1305,5593,7298,8103,256,491,10750,4584,6871,8017,4998,11749,1160,9214,8141,3148,1129,4242,4738,6450,2854,11119,8146,996,6009,1060,859,8116,9236,9199,1534,4408,2609,5475,5304,839,3345,7084,4642,1639,8633,10978,5651,1413,8559,11720,6842,1219,564,11465,9048,10473,239,3700,3725,510,2015,116,9353,1539,9673,11699,913,1660,3117,1927,969,4491,2510,9699,2520,12237,6333,6504,5062,11623,9862,5129,6552,726,2210,653,9148,4389,6956,1857,4053,1363,6706,4186,7032,2939,3870,1660,9407,7197,2961,8755,10856,7301,3539,2704,3635,3749,12095,11612,12280,5429,4784,2581,6613,12067,700,10803,12258,11346,8044,9030,11379,3007,7413,242,2110,11047,8228,8087,8711,10754,3838,527,11842,3483,7482,12006,5160,2662,7265,9744,2422,10429,4429,5619,685,9415,9505,5403,5432,5657,5835,3042,4311,6911,11000,764,10978,246,12046,2083,2829,9079,10960,8639,7055,7122,7999,8441,983,9203,160,3256,6987,12213,11944,5833,1641,3766,11588,4033,2841,201,2128,8705,2980,11027,6823,8196,2803,12029,438,10157,778,3640,11649,1314,6776,6813,12206,10098,7334,10428,5632,646,9206,2274,9896,4000,7754,7354,11269,10622,1341,10047,3364,1929,9086,7009,2116,6482,2746,1953,6580,9966,2144,8418,1995,4645,5555,3387,7105,6818,2897,4271,1162,12025,3018,7097,8348,715,7300,6893,9128,5652,6279,785,4903,4474,5720,186,8148,9823,1265,6066,3724,601,2123,7504,89,8697,12100,797,11641,2948,11409,10779,11613,2301,1208,6431,2481,3453,3771,5983,3074,12118,4912,6245,1357,3898,7463,8398,1115,7847,3718,7811,10626,9813,12204,983,4127,12026,583,2246,10419,2010,8376,5632,3121,9046,11631,5279,2756,3845,5274,166,7306,10484,2036,4960,4800,1829,11237,11025,3729,11997,6136,451,4670,8672,10997,11754,4226,335,355,10005,8538,6162,2696,8152,5244,1004,6586,9093,223,5985,7375,12058,4763,9665,4767,781,3922,3718,6817,8275,9234,3272,8369,8521,12237,4165,9867,8469,4753,3442,7918,6846,8073,1122,6216,5243,6270,2708,3600,10599,11078,4386,11835,1300,217,98,8093,8863,9876,7901,3706,2149,2851,7956,12197,5715,7896,421,8084,7680,1665,2807,5342,9143,4595,11478,5626,3630,10184,6097,2445,1881,5604,924,683,178,11270,3335,3199,8567,8521,5498,2290,1678,6260,4501,2977,10091,3855,10846,5960,10028,7425,2546,2003,2818,9544,10775];
		uint256[] memory hash = hashToPointZK(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

	function testVector4() public pure {
		bytes memory salt = "\xaf\xd4\xda\x90\x97\xcb\x3c\x86\x6a\xcb\xef\xab\x2c\x4e\x85\xe1\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e"; 
		bytes memory message = "\x50\x72\x61\x63\x74\x69\x63\x61\x6c\x20\x73\x65\x63\x75\x72\x69\x74\x79\x20\x6f\x6e\x20\x74\x68\x65\x20\x63\x68\x61\x69\x6e\x2e";
		// forgefmt: disable-next-line
		uint256[512] memory expected_hash = [uint256(7874), 10718,2778,5095,8649,5039,7951,544,9551,11755,7438,3844,11925,2405,3026,11838,9647,9503,12148,8193,8611,5667,7800,313,7348,9348,12021,402,9896,10117,8695,2045,11782,9981,9250,3557,6819,378,3787,10448,2977,6355,2583,6181,7337,2719,9375,5503,2109,10501,6633,9747,10479,5953,1030,728,898,3034,1152,11905,11457,11208,6679,2378,2192,4080,6064,7972,4679,2278,6059,8464,10189,1936,6655,8315,10546,3608,3356,3279,4394,1959,7117,11645,3450,4168,8356,9644,7116,464,749,9485,9144,10881,6431,2053,11870,952,1264,9998,10265,1824,8394,4475,7752,1100,9098,2336,6263,9146,6615,10774,4923,1440,3183,5023,6310,189,10955,9026,1258,517,11623,443,5133,10609,10535,10859,332,1965,10921,9292,11161,11371,6872,2244,628,6742,4976,4084,7843,7185,1122,8845,3704,8027,7267,9369,4704,7284,1476,7946,4567,10667,7006,666,9832,5574,2206,7909,12034,5864,9994,2207,3009,8877,11247,9494,10638,4348,2597,9760,5576,5805,4566,679,11434,4282,2332,5278,8600,12170,382,1828,6954,6308,551,1636,7601,2603,6861,2132,5523,2086,9597,3541,7781,4077,2825,942,10313,4218,3331,243,2011,7738,10251,10890,7573,1078,9998,1429,7830,12253,5597,990,688,11994,10546,11956,1150,4378,6278,6686,1394,2266,1625,7476,1861,2593,4714,1656,8203,6604,3018,2419,6256,9501,10663,7292,6721,4340,7890,1225,11275,6352,6746,5246,3878,11517,6530,10905,3251,359,12167,9458,11610,2024,8228,8176,2308,6217,3506,7974,8231,775,3468,9303,3284,7071,9928,1758,8451,11131,6812,6181,6830,1043,10060,7230,665,3383,3444,9883,5747,6146,9702,2591,6928,1991,11041,8126,6622,5625,11997,11486,6957,449,4091,8905,6493,11866,10149,8674,5860,9197,8080,10523,1111,12284,4765,7757,2253,10528,6188,3115,10117,5600,343,6826,8561,7379,10688,11845,2564,8350,9854,6053,8941,10524,6514,2077,1024,7249,10811,2521,1467,1792,4771,6103,5314,11456,1631,7761,9394,7904,3665,11274,10183,1240,9042,3712,11830,9426,727,11586,7587,7629,4450,4491,8465,10290,9079,5594,6626,11882,4267,7015,9997,179,2232,2432,11617,4845,2683,11349,12127,7685,10558,6995,10401,6264,9314,11496,11047,5772,3226,4445,10493,10039,9466,4958,10070,7048,7984,8803,5289,4586,2018,2358,6636,3025,4775,9176,541,7100,9370,6043,11591,1650,2575,8964,10816,3138,7458,794,5070,8604,5719,12077,8918,3505,5690,403,11203,9928,5958,6554,10762,7938,5723,11164,1688,11867,12278,1476,10840,6267,6177,8093,3737,11059,3755,9497,11913,5552,10332,226,5243,8948,8376,824,10859,11255,4533,4469,6153,2291,4831,10645,1188,2823,11265,6510,2666,6335,7084,2708,6897,645,929,2918,4181,5694,11190,7608,9894,8068,2217,2973,2117,4354,4932,1845,6130,2138,10554,7434,4980,3343,3494,11649,8806,3227,9358,8359,5750,10414,5090,10354,8881,347,11711,983,1194,4347,5523,1767,7384,115,11945,10414];
		uint256[] memory hash = hashToPointZK(salt, message);
		for (uint256 i = 0 ; i < n ; i ++ ) { assertEq(hash[i], expected_hash[i]); }
	}

}