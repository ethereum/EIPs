
// code generated using pythonref/generate_delegate.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_falcon_utils.sol";
import "../src/ZKNOX_ethfalcon.sol";
import "../src/ZKNOX_falcon_deploy.sol";

contract ZKNOX_DelegateTest is Test {
    ZKNOX_ethfalcon falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[512] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035];
    // forgefmt: disable-next-line
    uint256[512] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240];

    //stateful initialisation
    function setUp() public {
        bytes32 salt = keccak256(abi.encodePacked("ZKnox"));

        falcon = new ZKNOX_ethfalcon();

    }
function testVector0() public view {
// digest input
uint256 nonce = 8234104109163846784943770024234539283156661351252676085135638308281676808993;
address to = payable(0x70997970c51812dc3a010c7d01b50e0d17dc79c8);
bytes memory data = "My name is Renaud from ZKNOX!!!!";
uint256 value = 8233507323784283787257578973854145912713031387035164934604262159596347981824;
// digest output
bytes32 digest = 0xd5934a2a61e4f54fff2e3a5acc23a9c9a57fa8cc1c61fa504de94e585e125bb3
;assertEq(digest,keccak256(abi.encode(nonce, to, data, value)));
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [226161519869725251356344408907678892390104083586443563386125715426949738413, 21562601821269046643200858246202301062882075022429333461940742114375696384039, 90110472414887206477556374273677958001997210199677829434480895130167869638, 21654478003405504511793214880183423382929023752422285237729687373819110359084, 124010583294412487840928470639623851466514210374141790445951906817056047265, 21265773698128382376022414973503284259154426469208937332107898559103680786159, 21152693329132454665465594805050489554057022987498904220914967648446535106661, 267122872098078746204314427438418999544365432680553123824944190772157612036, 21682749335929743170997895048871458212437570849625560537002514737635745595434, 21484861795441278719515884781875615016373675264589641157843053661627825926024, 21494022030535633365205167718007907277461970816212877879540051900491462618919, 84810874808887099016503540234665696039790220957637403019349383349827678057, 350166225851747430063282192816376389746770807469089243428549425128277475466, 650199881649548118992129068296237894454679779678092241702610418170527744121, 21488719656068291800611809833048050573318660200348545716103717126286509420403, 314829877589026152452887293853354466667021155167076575997137597709859106809, 35345487657487992676444089392285082869581089981817556183765262333748457234, 21614166714262062022744724588614947811478116106019858299625278902489629994820, 152273369432049113794598368263972752042931312526597870853463921178997960704, 21084111354649684158712973468179417192282084173425140862405837349011434766486, 21670384457790930114458052024912458205631480789721490499424656469597800837116, 379872172932402056331205938589211266183595970379019632768796329750222536804, 245593521367258131080917704623762266216657855821763979281880033371241918282, 21283440200703761945357331956834716141942358303792526371596883332396933251127, 189052986446048398455180269543195197282143096421268665349796348614205046933, 21504626235299717977365561039066129148841879524220507149017609506261092008069, 434973774590266779008708861354942402923329948686241231971615661507036065573, 21375639956089752449127111071353048175707725148465526277052153320707821547382, 21594734092587436036182371931355996474990889855110505875435994529156361957075, 21329707868621957044425685110229835681048781346542006194666559814521442598942, 226161492811046565732054082664382647078339185537063904212969076231405449060, 21541400788752694945415155366788038951273885644370092786472578455575017947183];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message
bytes memory message  = "My name is Renaud from ZKNOX!!!!"; 
bytes memory salt = "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
function testVector1() public view {
// digest input
uint256 nonce = 8234104109163846784943770024234539283156661351252676085135638308281676808993;
address to = payable(0x70997970c51812dc3a010c7d01b50e0d17dc79c8);
bytes memory data = "My name is Simon also from ZKNOX";
uint256 value = 8233507323784283787257578973854145912713031387035164934604262159596347981824;
// digest output
bytes32 digest = 0x0b6215fd3876b6f157cdf491f7d42d41f5888cd2c973bb3ddfb2bd05a516cc8e
;assertEq(digest,keccak256(abi.encode(nonce, to, data, value)));
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21440694042833289054859749855694575694399621679942126537696744239308540805321, 380200900527087903224326724114275961802418842162457382299704292326755336222, 298604168569747447516733362087161829566044948540276643909788447361623338909, 194682492951912314693936458046240808985167958933488963667924374198713843858, 53333190986936866872301118356711987429531265623693865114053462381691076890, 21441019422412824187463657900747788250411949004068482317825613727957247983814, 21172132129626245519190349073435496550902555201401793361299060516640524796081, 333939734885897141171231244964845202404239102234610483484146716496451809124, 148743256082415044703838220904079284456280494946499960355112737790802198537, 162876824323589057350010366868496274400038523676927971665920610436916457310, 21451293071377217977316988980937099503153122394212697845104989626071434211280, 60073802629518875194566799997892701371571355504662768542337694242739388584, 21388010959045333654550249268920461317681766077421315061886640197954976219450, 288324578620911196781992098930610641995732878587436407235475269071879733287, 21624770865170015391876548096284746821433659423404993579108651609466470739847, 58306578203648892272463127352705348073784711790997981069480417999607508939, 137820735197328524800939211298585477679560587151345402233591435376942252307, 247365172290068348432716319199145743732214791451021337050436911314485051427, 21057610584909899338065540361217526751281977004016132608798516133638000947163, 155482676504345252004369030790819473805218553674896374888958720571501391756, 111316110067854030918836710239341002535279091677401712973197139845583798423, 404938372003769851816973325931699341456053884478709294219490316357240356970, 20985172092853042635462029670362048401755759749768614600379340417613265383364, 21490491270041219678796121148298539063021861672024087358751344245065408131010, 355466982669220941517977638158671888775201034001279981236619754206084989074, 754445103599676955486608285659921917080202576378706706417948238863790124929, 21018743750755391149513108066216528958425557242107859084336124450923199397948, 21306412852124692893774122701145280233741093988114863084817413412677005356980, 21426562177800554428094035469743241800361702627276691628387212884742254231905, 37105950209012782067595235163411218879343734453960612925073790644968304296, 42735564491052485928947290223186483191102936563227320476086824772570579260, 74215373138564650405080100096684004533669528950729722287741826395134308344];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message
bytes memory message  = "My name is Simon also from ZKNOX"; 
bytes memory salt = "\x34\x9e\xc7\x55\x46\xf5\x8f\xb7\xc2\x77\x5c\x38\x46\x2c\x50\x10\xd8\x46\xc1\x85\xc1\x51\x11\xe5\x95\x52\x2a\x6b\xcd\x16\xcf\x86\xf3\xd1\x22\x10\x9e\x3b\x1f\xdd"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
function testVector2() public view {
// digest input
uint256 nonce = 8234104109163846784943770024234539283156661351252676085135638308281676808993;
address to = payable(0x70997970c51812dc3a010c7d01b50e0d17dc79c8);
bytes memory data = "My name is Nicolas from ZKNOXtoo";
uint256 value = 8233507323784283787257578973854145912713031387035164934604262159596347981824;
// digest output
bytes32 digest = 0xa33361c0bd86eb5c7fb82f063a9e346b0eb44bf6a0b34a521db25c3001c13195
;assertEq(digest,keccak256(abi.encode(nonce, to, data, value)));
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [493280406753971226929976031993596850342161111769088657759474092498387414877, 21666847954886217826123635476511534057550082275486231742862337843079420653162, 109875779881237343610361203519621467418377214301497312083217702145854013523, 503559501491091908149810671762781556617803573964815629679220676117999923159, 21372111923563394378968013641991361339397762109386277117902664433219650846741, 21532990295645934290355831564872678296456029412764353701557850661383307363, 173480980185259649575791620110178636369669309822598196803120717449233236414, 21412746683156612101084891765314968827983432013471749676878020185680898490515, 21681310030121135439859814426876165480980070959966453727048157072466602897379, 21396840233685148646671379850245383285037514069299062225680501622844160213001, 128981161704031251784854793261393600224759350926019698641624147363672162307, 21635365697805263602901298789127025939929303985502366564601768330372593615124, 312738859209578709605724524224454848234140239569960557701171734594972549271, 21527594600191975262698759859594253387465486455064772181657836103769186238538, 173481676116780376299789997749090946611467760971006314728840295483060465416, 21624764960904261920358943142936811072411684308237944131517399197477191430079, 120149698320114996100748073311329857140638466475824628357142275607443865786, 302132223079224950606872447307549491354751163962023601416055057784134303755, 381964431493257372594453185920670056274137042058408520083182815574448418670, 21647415958186899378726232571498739302820178667564698188390356859748065083615, 307432899161402662052853686553080133384893846062126131313747474270394658713, 21456917374440337909509543177157961359147775450053932760273264921545288974433, 21612403933228759860909192837402577646806726181419202755100193969794221801520, 180226407742409648039194863413372872826179697811580321953470262234429718547, 77741922930460102806599114199758228650232041145483256643448691507614461862, 118702299723870137795351332442449242690861802196273737549076621668856627343, 21704275671956344989475420798210146558259612448899703590043993885858480402339, 21379175564391155362138871081486477216288599520801141537497762534844440325998, 240617070675219561230587748069191713484516510548261799689441157787275636724, 21515221332528319111888890973818457537968587277578981988393795080115304738737, 134285661108981050049243599585195266262653999130588572481093224346941665227, 21235741454771514403806989755440143813739340546610785310564869342396846702713];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message
bytes memory message  = "My name is Nicolas from ZKNOXtoo"; 
bytes memory salt = "\xaa\xae\x31\x4e\xd9\x08\x3d\xab\x4b\x09\x9f\x8e\x30\x0f\x01\xb8\x65\x0f\x1f\x4b\x1d\x8f\xcf\x3f\x3c\xb5\x3f\xb8\xe9\xeb\x2e\xa2\x03\xbd\xc9\x70\xf5\x0a\xe5\x54"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
function testVector3() public view {
// digest input
uint256 nonce = 8234104109163846784943770024234539283156661351252676085135638308281676808993;
address to = payable(0x70997970c51812dc3a010c7d01b50e0d17dc79c8);
bytes memory data = "We are ZKNox, you already know!!";
uint256 value = 8233507323784283787257578973854145912713031387035164934604262159596347981824;
// digest output
bytes32 digest = 0xf683bb8e3181f062ea423ec4cdd2e619dbaa70778322990aed8b4a400e2f4965
;assertEq(digest,keccak256(abi.encode(nonce, to, data, value)));
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [139582621619091973268406996862193698115430301984363595111361129735251963899, 21359742079961959807246726389930794441432293621268971096702536863089608764897, 118382959146546848231745772948852012638307191547927788022832285183894683649, 21536429945741829194822207571539258431069200017173625118392011897849553813622, 148423138579366956058453933217336125587539449861596574326165704499660849193, 21619143331751904588194814768420168152638632467051251418057648644844238024339, 21645973353437921644598641509099719846654215498799873410113902759399807451437, 257963203219708243300732811536722559054030349973301976653200023614616043653, 21536427061002106763298038443874169158917156624102982844590286126131717025734, 12694850722174439642871122874065057800644133054382397703390981767837790160, 777739737687178910580575551457083463876653934529989863387426992066039382088, 21516990125743754299336899012536203041248035844446387530000323264495367368624, 21490489954013236486107894822534818339565076439147260912588686182594426372354, 21437157922294133544212697991292265820771775754117682697931345064139374919808, 21509925266720509611414156962916589529068416782368373787089922554073875415192, 367830868117506652633718625851683829130321499160650676289409389877241786089, 88669889658952898442752642697476954446308354278215588371055551702317006901, 21574969755702614248520897941792480583348257926307134288187280486423275450109, 364299654275891111018512487940808841527579578145268499558750714322582777847, 21117363779808737333135289914774515051669156612888828075917860361460817985629, 203193963733906824598952038210561425452150206885692922469059683148180553769, 22972009389482636634192497037003523577501302464521224368742855070055792667, 21649182993950735668923104947618807833401398513458441748866431515688969830420, 273869005635995711530442580526213641543117021453352834677107989337277476771, 21677447370707124799045982324476925159788884325794191928617242127358022516783, 174921579915319636888007064211193098113178630414544151415314009163722719431, 102482440912378770604665655586245637409462049468160924345149628581252104245, 21574971314407553792678838266568751305931535667092054255730356374069653745649, 21361187133146925391703267663708276721497143620377962792430426707450819718851, 21536100975503995417294567412470637023431286155732131299406027168369673777075, 249454136766025531236971116086006518621283092784519519001855085335783157682, 65703358185893269824880694394039966480551855883551664435156905045093396462];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message
bytes memory message  = "We are ZKNox, you already know!!"; 
bytes memory salt = "\xf9\xa6\x6d\x13\x68\xb2\x08\xe2\x1f\x7c\x10\xd0\x4a\x3d\xbd\x4e\x36\x06\x33\xe5\xdb\x4b\x60\x26\x01\xc1\x4c\xea\x73\x7d\xb3\xdc\xf7\x22\x63\x2c\xc7\x78\x51\xcb"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
function testVector4() public view {
// digest input
uint256 nonce = 8234104109163846784943770024234539283156661351252676085135638308281676808993;
address to = payable(0x70997970c51812dc3a010c7d01b50e0d17dc79c8);
bytes memory data = "Practical security on the chain.";
uint256 value = 8233507323784283787257578973854145912713031387035164934604262159596347981824;
// digest output
bytes32 digest = 0x0450643f01b86b1fe07872cfd1f0a179f7d5f86ef17861782db6dbea32bd08bf
;assertEq(digest,keccak256(abi.encode(nonce, to, data, value)));
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21144185475908384251291848127658451840118668397120687346685347800276108181618, 178454524157596204083198831737579244400720412848618379921769757194428219458, 86578471827589046202171357245160750480897959197291238936653154487434030789, 784480743821377177934339092951575843300033553278216791444403021043486961575, 353699434701364706443627805959334892166508764041347923784496399286200041538, 72451869138847781661426646120114564018595725986978280352449638557032579498, 21435393038376763921101062668192245393782476009562964970873611640580267519800, 705986116237663506800642617894538221512608370891034550795081818517362, 65376285084408461502234689381573972459125513396366082569016217541041663584, 21679541053220905904510927288790386269175132850042252274547753174760158670843, 21324400663297068481399047979935312225696838775103987934813424263511810834699, 289763376971620586415263245947844816210046230546701258788327344957764939717, 40967283582068681957600723598741436509851332224180615120829315268242768168, 21461893295895327037059181441182965013902520383783813647355113579862887247793, 21325848039999466570360550438977118240390570864280934984247172328693515354234, 21294043552704368897087468350576426571962272752582902692954825892179403079794, 21677450012801568230193684183601572885002230860212020797824047436198366949365, 21638907129448153283707022089913338473147322115786649879543261589555176746777, 196122100186924282937302047441332183757025956565304475294897769263487856406, 392569234357523206882608241763500232207840004647588738054276481672500686712, 252668027134643210375492535292333694292614581387624982648349668379704819991, 21544941470533809535997047481859823358278023483462962355682885339669404069871, 21191892152908081918989650988263359404184056429060781812756326363070358368229, 21423024542688818504918374823577453817908203518144309997034914444964200120362, 21391541288105394766038619046271188994221001023418561644664913323972632838222, 21442460107973636616796391997122174347769757548224653885574465252287531200421, 21191894121096905079400801662571023638728816084051531488502262713233335451705, 611658535085829530731475531678956174590070939351233092540783592313493270321, 21654807243255145882064710151321498018289106530071115115589225714940500181133, 236758832697884990590162108098319256018384768742313014172961613048701059086, 17679232676729902387956827993227407334162514609488906570077505897914248999, 21617380151202513115664190491258036018727194956731358697115782406707217760395];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message
bytes memory message  = "Practical security on the chain."; 
bytes memory salt = "\x14\x30\x45\xd7\x91\xcc\x85\xef\xf5\xb2\x19\x32\xf2\x38\x61\xbc\xf2\x3a\x52\xb5\xda\x67\xea\xf7\xba\xae\x0f\x5f\xb1\x36\x9d\xb7\x8f\x3a\xc4\x5f\x8c\x4a\xc5\x67"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
}
